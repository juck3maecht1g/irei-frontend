[{"/home/sihi/irei-frontend/src/index.tsx":"1","/home/sihi/irei-frontend/src/BackButton.tsx":"2","/home/sihi/irei-frontend/src/controlPages/ControlPage.tsx":"3","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx":"4","/home/sihi/irei-frontend/src/settings/Settings.tsx":"5","/home/sihi/irei-frontend/src/controlPages/ActionPage/ChooseListPage.tsx":"6","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx":"7","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseRobotPage.tsx":"8","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetTimePage.tsx":"9","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetCustomPage.tsx":"10","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ActionKindPage.tsx":"11","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseActionlistAsAction.tsx":"12","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseMultipleGripper.tsx":"13","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx":"14","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/RobotPositionPage.tsx":"15","/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx":"16","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx":"17","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/MappingRobots.tsx":"18","/home/sihi/irei-frontend/src/TopBar.tsx":"19","/home/sihi/irei-frontend/src/controlPages/GripperButton.tsx":"20","/home/sihi/irei-frontend/src/controlPages/SavePositionButton.tsx":"21","/home/sihi/irei-frontend/src/controlPages/LoggerButton.tsx":"22","/home/sihi/irei-frontend/src/controlPages/ResetButton.tsx":"23","/home/sihi/irei-frontend/src/controlPages/EmergencyExit.tsx":"24","/home/sihi/irei-frontend/src/controlPages/ModeButton.tsx":"25","/home/sihi/irei-frontend/src/controlPages/ActionListButton.tsx":"26","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx":"27","/home/sihi/irei-frontend/src/PopUp/NamingPopUp.tsx":"28","/home/sihi/irei-frontend/src/backendComunication/FetchRobots.tsx":"29","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionFetch.tsx":"30","/home/sihi/irei-frontend/src/PopUp/ErrorPopUP.tsx":"31","/home/sihi/irei-frontend/src/backendComunication/BasicOpperations.tsx":"32","/home/sihi/irei-frontend/src/PopUp/PopUp.tsx":"33","/home/sihi/irei-frontend/src/backendComunication/SetRobots.tsx":"34","/home/sihi/irei-frontend/src/backendComunication/FetchAndSetDirExp.tsx":"35","/home/sihi/irei-frontend/src/choosePages/ChooseRobotButton.tsx":"36","/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx":"37","/home/sihi/irei-frontend/src/backendComunication/FetchAndSetLab.tsx":"38","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx":"39","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotsForMapping.tsx":"40","/home/sihi/irei-frontend/src/NavigationButton.tsx":"41","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegistered.tsx":"42"},{"size":3155,"mtime":1677139636025,"results":"43","hashOfConfig":"44"},{"size":591,"mtime":1677080738068,"results":"45","hashOfConfig":"44"},{"size":6170,"mtime":1677139383266,"results":"46","hashOfConfig":"44"},{"size":4302,"mtime":1677139383266,"results":"47","hashOfConfig":"44"},{"size":317,"mtime":1676902500285,"results":"48","hashOfConfig":"44"},{"size":3017,"mtime":1677139383266,"results":"49","hashOfConfig":"44"},{"size":3463,"mtime":1677153446015,"results":"50","hashOfConfig":"44"},{"size":2783,"mtime":1677139383266,"results":"51","hashOfConfig":"44"},{"size":1985,"mtime":1677139383266,"results":"52","hashOfConfig":"44"},{"size":2119,"mtime":1677139383266,"results":"53","hashOfConfig":"44"},{"size":2235,"mtime":1676981906730,"results":"54","hashOfConfig":"44"},{"size":1646,"mtime":1677014801260,"results":"55","hashOfConfig":"44"},{"size":2757,"mtime":1677094355922,"results":"56","hashOfConfig":"44"},{"size":2100,"mtime":1676889472584,"results":"57","hashOfConfig":"44"},{"size":2052,"mtime":1677139383266,"results":"58","hashOfConfig":"44"},{"size":4975,"mtime":1677139383262,"results":"59","hashOfConfig":"44"},{"size":2224,"mtime":1677139383262,"results":"60","hashOfConfig":"44"},{"size":3484,"mtime":1677139383262,"results":"61","hashOfConfig":"44"},{"size":2772,"mtime":1677139383262,"results":"62","hashOfConfig":"44"},{"size":931,"mtime":1676451976898,"results":"63","hashOfConfig":"44"},{"size":1299,"mtime":1676451976898,"results":"64","hashOfConfig":"44"},{"size":2542,"mtime":1677139383266,"results":"65","hashOfConfig":"44"},{"size":809,"mtime":1676451976898,"results":"66","hashOfConfig":"44"},{"size":746,"mtime":1676451976898,"results":"67","hashOfConfig":"44"},{"size":1305,"mtime":1676451976898,"results":"68","hashOfConfig":"44"},{"size":2076,"mtime":1677140847387,"results":"69","hashOfConfig":"44"},{"size":3382,"mtime":1677086286871,"results":"70","hashOfConfig":"44"},{"size":1955,"mtime":1677139383262,"results":"71","hashOfConfig":"44"},{"size":1826,"mtime":1677080738072,"results":"72","hashOfConfig":"44"},{"size":9643,"mtime":1677087338160,"results":"73","hashOfConfig":"44"},{"size":748,"mtime":1677139383262,"results":"74","hashOfConfig":"44"},{"size":3932,"mtime":1677092935662,"results":"75","hashOfConfig":"44"},{"size":275,"mtime":1676886184374,"results":"76","hashOfConfig":"44"},{"size":2162,"mtime":1677100359393,"results":"77","hashOfConfig":"44"},{"size":5069,"mtime":1677093056955,"results":"78","hashOfConfig":"44"},{"size":978,"mtime":1676368735165,"results":"79","hashOfConfig":"44"},{"size":558,"mtime":1677139383262,"results":"80","hashOfConfig":"44"},{"size":1527,"mtime":1677080738068,"results":"81","hashOfConfig":"44"},{"size":928,"mtime":1676368735165,"results":"82","hashOfConfig":"44"},{"size":1539,"mtime":1677139383262,"results":"83","hashOfConfig":"44"},{"size":520,"mtime":1677139383262,"results":"84","hashOfConfig":"44"},{"size":2032,"mtime":1677139383262,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ow93vw",{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"178","usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":3,"source":"185","usedDeprecatedRules":"92"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"92"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"92"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sihi/irei-frontend/src/index.tsx",[],[],"/home/sihi/irei-frontend/src/BackButton.tsx",[],[],[],"/home/sihi/irei-frontend/src/controlPages/ControlPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx",["218","219"],[],"/home/sihi/irei-frontend/src/settings/Settings.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/ChooseListPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx",["220","221","222","223","224"],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseRobotPage.tsx",["225","226"],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetTimePage.tsx",["227","228","229"],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetCustomPage.tsx",["230","231","232"],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ActionKindPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseActionlistAsAction.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseMultipleGripper.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx",["233"],[],"/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/RobotPositionPage.tsx",["234","235","236","237"],[],"/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx",["238"],[],"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx",["239","240"],[],"/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/MappingRobots.tsx",[],[],"/home/sihi/irei-frontend/src/TopBar.tsx",["241"],[],"/home/sihi/irei-frontend/src/controlPages/GripperButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/SavePositionButton.tsx",["242"],[],"/home/sihi/irei-frontend/src/controlPages/LoggerButton.tsx",["243"],[],"/home/sihi/irei-frontend/src/controlPages/ResetButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/EmergencyExit.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ModeButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionListButton.tsx",["244","245","246"],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx",[],[],"/home/sihi/irei-frontend/src/PopUp/NamingPopUp.tsx",["247"],[],"/home/sihi/irei-frontend/src/backendComunication/FetchRobots.tsx",["248","249","250"],[],"// this file contains multiple methods used to fetch robots from the backend\n\nimport React from \"react\"\nimport { useState } from \"react\"\nimport { informLabChoise } from \"./FetchAndSetLab\"\n\n\n\nconst fetchAdressGripperRobots = \"http://127.0.0.1:5000/api/getRobotsForGripper\" \nconst fetchAdressLabRobots = \"http://127.0.0.1:5000/api/getRobotsOfLab\"\nconst fetchAdressExpRobots = \"http://127.0.0.1:5000/api/getRobotsInExperiment\"\n\n\n\n//gets the robots chosen for gripper on controll page\n\nexport async function GetGripperRobots(setRobots){\n    var [fetched, setfetched] = useState(false) \n    getRobots(setRobots, fetched, setfetched, fetchAdressGripperRobots)\n \n    \n  }\n  \n\n  //gets the robots chosen for experiment\n  export async function GetExpRobots(setRobots){\n      var [fetched, setfetched] = useState(false) \n      getRobots(setRobots, fetched, setfetched, fetchAdressExpRobots)\n    }\n\n\n\n    export async function GetLabRobots(setRobots, labName){\n        var [fetched, setfetched] = useState(false) \n        getRobots(setRobots, fetched, setfetched, fetchAdressLabRobots)\n      }\n\n  /** gets a list of robots from the specified adress and sublies them ad map to the specified usestate\n   * \n   * @param setRobots \n   * @param fetched \n   * @param setfetchedRobots \n   * @param adress \n   * @returns \n   */\n    async function getRobots(setRobots, fetched, setfetched, adress){\n      \n      if(fetched) {\n          return\n        }\n         setfetched (true)\n          const data = await (\n            await fetch(\n              adress\n            )\n          ).json().then(data => {\n                var robots = new Map()\n                for(let j = 0; j < data.length; j++) {\n                  robots.set(data[j].ip, data[j].name)\n                }\n            \n            setRobots(robots)\n          }\n          )\n      }","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionFetch.tsx",["251","252","253"],[],"import React from \"react\"\nimport { useState } from \"react\"\nimport { passDataDirect, post, passDataAsMap, convertBackToFrontMapping, convertFrontToBackMapping, passDataForActionMapping, passDatalenght, passDataCoordinates, post2 } from \"../../backendComunication/BasicOpperations\"\n\nconst fetchAdressAllActionLists = \"http://127.0.0.1:5000/api/get-action_lists\"\nconst postAdressActionList = \"http://127.0.0.1:5000/api/set_action_list\"\nconst fetchAdressContentActiveList = \"http://127.0.0.1:5000/api/get_action_list_content\"\nconst postAdressAppendAction = \"http://127.0.0.1:5000/api/append_action\"\nconst postAdressDeleteAction = \"http://127.0.0.1:5000/api/delete_action\"\nconst postAdressSwapActions = \"http://127.0.0.1:5000/api/swap_action\"\nconst postAdressCreateActionList = \"http://127.0.0.1:5000/api/create_action_list\"\nconst postAdressExecuteList = \"http://127.0.0.1:5000/api/executeList\"\nconst postAdressCoordinateType = \"http://127.0.0.1:5000/api/set_coordinate_type\"\nconst fetchAdressPositionList = \"http://127.0.0.1:5000/api/get_coordinates\"\nconst fetchAdressMapping = \"http://127.0.0.1:5000/api/get_mapping_table\"\nconst postAdressMapping = \"http://127.0.0.1:5000/api/set_mapping_in_table\"\nconst postAdressMappingPosition= \"http://127.0.0.1:5000/api/set_mapping_pos\"\nconst postAdressButtonIndex= \"http://127.0.0.1:5000/api/set_button_index\"\nconst fetchAdressALBContent = \"http://127.0.0.1:5000/api/get_action_list_button_content\"\nconst fetchAdressCoordinates = \"http://127.0.0.1:5000/api/get_coordinates\"\n\n/**gets a list of dictionarrys containing a \"name\" of the action list and a \"key\"\n * specifieing if sequential or parallel\n * \n * @param setLists \n */\nexport async function GetActionListNames(setLists){ // returns string list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setLists, fetched, setfetched, fetchAdressAllActionLists)\n\n\n}\n/**\n *  fetches an array of dictionarrys each containing all data nessesary if key != action_list\n *  otherwise containig just the name of the underling actionList and information if it is a paralell od sequential list\n * @param setContent the method to set with the fetched data\n */\n\nexport async function GetActionListContent(setContent){ // returns string list\n    var [fetched, setfetched] = useState(false)                                     \n    passDataDirect(setContent, fetched, setfetched, fetchAdressContentActiveList)\n\n\n}\n\n/** action is a dictionarry containing the key which action to append, and all nessesary arguments for that action\n */\nexport async function appendAction( errorfunction, action, setErrorMessage){\n    var toPost =  action\n    toPost.set(\"marker\", \"append_action\")\n    const result = Object.fromEntries(toPost)\n    var reload = false\n   \n    await post2(result, postAdressAppendAction).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n\n/** informs the backend that the actionlist with the given name was chosen\n * and gets its content\n * \n * @param setContent \n * @param name \n */\nexport async function SetActionList( errorfunction, action, setErrorMessage){\n    console.log(action)\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"set_action_list\")\n    toPost.set(\"name\", action)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressActionList).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n/** delets the action in the currently changed list at the given position\n * and gets the changed list\n * \n * @param setContent \n * @param position \n */\nexport async function DeleteAction( errorfunction,position, setErrorMessage){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"delete_action\")\n    toPost.set(\"position\", position)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressDeleteAction).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n           errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** swaps the actions at the two specified positions and gets the modified list\n * \n * @param setContent \n * @param first position as int\n * @param second \n */\nexport async function SwapActions(first, second,  errorfunction,setErrorMessage){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"swap\")\n    toPost.set(\"first\", first)\n    toPost.set(\"second\", second)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressSwapActions).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n/** creates a new action listwith given name and given type(\"sequential_list\" or\"parallel_list\")\n *  and gets the content of the new list\n * @param setContent \n * @param name \n * @param type \n */\nexport async function CreatetActionList(name:String, type:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"create_action_list\")\n    message.set(\"name\", name)\n    message.set(\"key\", type)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCreateActionList).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n/** executes the action list with the given name\n * \n * @param name \n */\nexport async function ExecuteActionList(name:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"execute_action_list\")\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressExecuteList).then(res => {\n        if(res !== \"Done\") {\n            console.log(res)\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** sets the type the coordinates are handeled ans displaied in ton the specified type(\"cartesian\",\"joint\")\n * \n * @param type \n */\nexport async function SetCoordinateType(type:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"set_coordinate_type\")\n    message.set(\"type\", type)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCoordinateType).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** gets all available positions as dict with (\"name\", and the coordinate \"coordinate\")\n * \n * @param setPositions \n */\nexport async function GetPositions(setPositions){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setPositions, fetched, setfetched, fetchAdressPositionList)\n\n\n}\n\n/** todo matching naming\n * \n * @param setMapping \n */\nexport async function GetMapping(setMapping){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    await passDataForActionMapping(setMapping, fetched, setfetched, fetchAdressMapping)\n}\n\n\n\n\nexport async function SetMappingPos(pos:[],  errorfunction,setErrorMessage){\n    var reload = false\n    await post(pos, postAdressMappingPosition).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\nexport async function SetMapping(mappingRobots,  errorfunction,setErrorMessage){\n    mappingRobots = convertFrontToBackMapping(mappingRobots)\n    var message = Array()\n    for (var x = 0; x<mappingRobots.length; x++) {\n        const temp = Object.fromEntries(mappingRobots[x])\n        message.push(temp)\n\n    }\n    var reload = false\n    await post(message, postAdressMapping).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n\nexport async function SetButtonIndex(index,  errorfunction,setErrorMessage){\n    var reload = false\n    console.log(\"idex\", index)\n    await post(index, postAdressButtonIndex).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n\n\nexport { convertBackToFrontMapping }\n\nexport async function GetALButtonContentLen(setButton) {\n    var [fetched, setfetched] = useState(false) \n    await passDatalenght(setButton, fetched, setfetched, fetchAdressALBContent)\n}\n\nexport async function GetALButtonContent(setButton) {\n    var [fetched, setfetched] = useState(false) \n    await passDataDirect(setButton, fetched, setfetched, fetchAdressALBContent)\n}\n\n\n\nexport async function GetCoordinates(setCoordinates){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    await passDataCoordinates(setCoordinates, fetched, setfetched, fetchAdressCoordinates)\n}\n\n\n","/home/sihi/irei-frontend/src/PopUp/ErrorPopUP.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/BasicOpperations.tsx",["254","255","256","257","258","259","260","261","262","263","264"],[],"import React from \"react\"\n\n\nexport async function passDataDirect(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"data\", data)\n            set(data)\n        }\n        )\n}\n\nexport async function passDataAsMap(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            var dir = new Map(Object.entries(data))\n            set(dir)\n        }\n        )\n}\n\n\nexport async function post (content, postAdress){\n\n    const response = await fetch(postAdress, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(content)\n    })\n   \n    return (await response.text()).toString()\n\n}  \n\n\nexport async function post2 (content, postAdress){\n    console.log(\"COntent\", content)\n    console.log( JSON.stringify(content))\n    console.log(\"ADTRESS\", postAdress)\n        console.log(\"ves\")\n\n    var response = await fetch(postAdress, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(content)\n    })\n    response = await response\n    return await (await (await response.text()).toString())\n\n}  \n\n\n\nexport async function passDataForActionMapping(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(data)\n            set(convertBackToFrontMapping(data))\n        }\n        )\n}\n\n\n\nexport function convertFrontToBackMapping(frontMapping) {\n    var list = Array()\n    for (var x = 0; x< frontMapping.length; x++) {\n        var elem = frontMapping[x]\n        var temp = new Map() \n        var name = elem.get(\"name\")\n        temp.set(name.split(\".\")[0], elem.get(\"robot\"))\n        list.push(temp)\n    }\n    return list\n\n}\n\nexport function convertBackToFrontMapping(backMapping) {\n    var list = Array()\n   \n    var totalMap = new Map(Object.entries(backMapping))\n    for (let key of totalMap.keys()) {\n        var elem = new Map()\n        elem.set(\"name\", key + \". robot in this list\")\n        elem.set(\"robot\", totalMap.get(key))\n        list.push(elem)\n    } \n    return list\n\n}\n\nexport async function passDatalenght(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"data\", data)\n            set(data.length)\n        }\n        )\n}\n\n\nexport async function passDataCoordinates(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"dataCoord\", data)\n            var toReturn = new Array()\n            for(var elem of data) {\n                console.log(elem)\n                toReturn.push(new Map(Object.entries(elem)))\n            }\n            console.log(\"return\", toReturn)\n            set(toReturn)\n        }\n        )\n}\n\n\n\nexport async function passDataMatches(set,reference, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n           if(data == reference){\n            set(true)\n           }else {\n            set(false)\n           }\n        }\n        )\n}","/home/sihi/irei-frontend/src/PopUp/PopUp.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/SetRobots.tsx",["265","266"],[],"/home/sihi/irei-frontend/src/backendComunication/FetchAndSetDirExp.tsx",["267"],[],"import React from \"react\"\nimport { useState } from \"react\"\nimport { post, passDataAsMap, passDataDirect, passDataMatches } from \"./BasicOpperations\"\nconst fetchAdressGetExperiments = \"http://127.0.0.1:5000/api/getRegExp\"\nconst postAdressChosenExperiment = \"http://127.0.0.1:5000/api/setup_exp\"\nconst fetchAdressGetDirectories = \"http://127.0.0.1:5000/api/get_content\"\nconst postAdressNavigateUP = \"http://127.0.0.1:5000/api/navigate_up\"\nconst postAdressNavigateDown = \"http://127.0.0.1:5000/api/navigate_down\"\nconst postAdressCreateDirectory = \"http://127.0.0.1:5000/api/create_dirctory\"\nconst postAdressDeleteDirectory = \"http://127.0.0.1:5000/api/delete_dirctory\"\nconst postAdressConfirmDirChoisey = \"http://127.0.0.1:5000/api/confirm_dir_coise\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_dir\"\nconst fetchAdressPath = \"http://127.0.0.1:5000/api/file_name\"\nconst fetchAdressTop = \"http://127.0.0.1:5000/api/is_top\"\n\n// contains dummy\n\n/** gets names of all registered experiments as array\n * \n */\nexport async function GetExperiments(setExperiments){\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setExperiments, fetched, setfetched, fetchAdressGetExperiments)\n\n\n}\n\nexport async function SetExperiment(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"SetExperiment\")\n    message.set(\"experiment\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressChosenExperiment).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n// contains dummy\n\n/** gets a dictionary with two entrys\n * \"to_navigate\" all child experiments\n * \"cant_navigate\" all other files in directory\n * @param setDirectories \n */\nexport async function GetDirectories(setDirectories){\n    var [fetched, setfetched] = useState(false) \n   passDataAsMap(setDirectories, fetched, setfetched, fetchAdressGetDirectories)\n    \n\n    \n}\n\nexport async function GetPath(setPath){\n    var [fetched, setfetched] = useState(false) \n   passDataDirect(setPath, fetched, setfetched, fetchAdressPath)\n    \n\n    \n}\n\n\nconst markerNavUP = \"navigate_up\"\nexport async function NavigateUP(action,setErrorMessage){\n    var message =  new Map()\n    var reload = false\n    message.set(\"marker\", markerNavUP)\n    const result = Object.fromEntries(message)\n    await post(result, postAdressNavigateUP).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        } else {\n\n       reload = true}\n    })\n\n    return reload\n\n\n}\nconst markerNavDown = \"navigate_down\"\nexport async function NavigateDown(action, name, setErrorMessage){\n    var message =  new Map()\n   \n    message.set(\"marker\", markerNavDown)\n    message.set(\"dir\", name)\n     var reload = false\n    const result = Object.fromEntries(message)\n    await post(result, postAdressNavigateDown).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nconst markerCreate = \"create\"\nexport async function Create(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", markerCreate)\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCreateDirectory).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\nconst markerDeleteDirectory = \"delete_directory\"\nexport async function DeleteDirectory(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", markerDeleteDirectory)\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressDeleteDirectory).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nexport function BaseNameDir(setName) {\n    var [fetched, setFetched] = useState(false) \n    passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}\n\nconst confirmMarker = \"confirm_dir_coise\"\nexport async function confirmDirChoise(action,setErrorMessage) {\n    var reload = false\n    await post(confirmMarker, postAdressConfirmDirChoisey).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nexport async function IsTop(setTop) {\n    var [fetched, setFetched] = useState(false) \n    var reference = \"true\"\n   await passDataMatches(setTop, reference, fetched, setFetched, fetchAdressTop)\n}\n\n\n","/home/sihi/irei-frontend/src/choosePages/ChooseRobotButton.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/FetchAndSetLab.tsx",["268","269"],[],"import React from \"react\"\nimport { post } from \"./BasicOpperations\";\n\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n \n \n /**informs the backend which lab was chosen\n     * \n     * @param labName  name of the chosen lab\n     */\n export async function informLabChoise (action, labName, setErrorMessage){\n  var message =  new Map()\n  message.set(\"marker\", \"setCurrentLab\")\n  message.set(\"name\", labName)\n  var reload = false\n  const result = Object.fromEntries(message)\n  await post(result, postAdressLab).then(res => {\n      if(res !== \"Done\") {\n          setErrorMessage(res)\n          action()\n          console.log(1)\n         reload = false\n      }\n    else {\n     reload = true\n    }\n  })\n\n  return reload\n\n    \n  }\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched){\n  \n    if(fetched) {\n      return\n    }\n     setfetched (true)\n      const data = await (\n        await fetch(\n          fetchAdress\n        )\n      ).json().then(data => {\n        var labs = new Map()\n        for(let i = 0; i < data.length; i++) {\n            var robots = new Map()\n            for(let j = 0; j < data[i].robots.length; j++) {\n              robots.set(data[i].robots[j].ip, data[i].robots[j].name)\n            }\n          labs.set(data[i].name, robots)\n        }\n        setLabs(labs)\n      }\n      )\n     \n          // set state when the data received\n  }","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx",["270"],[],"/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotsForMapping.tsx",["271"],[],"/home/sihi/irei-frontend/src/NavigationButton.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegistered.tsx",["272"],[],{"ruleId":"273","severity":1,"message":"274","line":14,"column":12,"nodeType":"275","messageId":"276","endLine":14,"endColumn":24},{"ruleId":"273","severity":1,"message":"277","line":15,"column":12,"nodeType":"275","messageId":"276","endLine":15,"endColumn":17},{"ruleId":"273","severity":1,"message":"278","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":14},{"ruleId":"273","severity":1,"message":"279","line":6,"column":10,"nodeType":"275","messageId":"276","endLine":6,"endColumn":27},{"ruleId":"273","severity":1,"message":"280","line":6,"column":29,"nodeType":"275","messageId":"276","endLine":6,"endColumn":41},{"ruleId":"273","severity":1,"message":"274","line":16,"column":12,"nodeType":"275","messageId":"276","endLine":16,"endColumn":24},{"ruleId":"273","severity":1,"message":"277","line":17,"column":12,"nodeType":"275","messageId":"276","endLine":17,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":16,"column":10,"nodeType":"275","messageId":"276","endLine":16,"endColumn":22},{"ruleId":"273","severity":1,"message":"277","line":17,"column":10,"nodeType":"275","messageId":"276","endLine":17,"endColumn":15},{"ruleId":"273","severity":1,"message":"278","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":14},{"ruleId":"273","severity":1,"message":"274","line":9,"column":12,"nodeType":"275","messageId":"276","endLine":9,"endColumn":24},{"ruleId":"273","severity":1,"message":"277","line":10,"column":12,"nodeType":"275","messageId":"276","endLine":10,"endColumn":17},{"ruleId":"273","severity":1,"message":"278","line":3,"column":23,"nodeType":"275","messageId":"276","endLine":3,"endColumn":27},{"ruleId":"273","severity":1,"message":"274","line":11,"column":12,"nodeType":"275","messageId":"276","endLine":11,"endColumn":24},{"ruleId":"273","severity":1,"message":"277","line":12,"column":12,"nodeType":"275","messageId":"276","endLine":12,"endColumn":17},{"ruleId":"273","severity":1,"message":"281","line":46,"column":11,"nodeType":"275","messageId":"276","endLine":46,"endColumn":20},{"ruleId":"273","severity":1,"message":"278","line":2,"column":10,"nodeType":"275","messageId":"276","endLine":2,"endColumn":14},{"ruleId":"273","severity":1,"message":"282","line":2,"column":16,"nodeType":"275","messageId":"276","endLine":2,"endColumn":27},{"ruleId":"273","severity":1,"message":"274","line":13,"column":10,"nodeType":"275","messageId":"276","endLine":13,"endColumn":22},{"ruleId":"273","severity":1,"message":"277","line":14,"column":10,"nodeType":"275","messageId":"276","endLine":14,"endColumn":15},{"ruleId":"273","severity":1,"message":"283","line":6,"column":60,"nodeType":"275","messageId":"276","endLine":6,"endColumn":75},{"ruleId":"273","severity":1,"message":"284","line":8,"column":7,"nodeType":"275","messageId":"276","endLine":8,"endColumn":18},{"ruleId":"273","severity":1,"message":"285","line":15,"column":9,"nodeType":"275","messageId":"276","endLine":15,"endColumn":17},{"ruleId":"273","severity":1,"message":"278","line":7,"column":10,"nodeType":"275","messageId":"276","endLine":7,"endColumn":14},{"ruleId":"273","severity":1,"message":"286","line":8,"column":7,"nodeType":"275","messageId":"276","endLine":8,"endColumn":20},{"ruleId":"273","severity":1,"message":"287","line":41,"column":12,"nodeType":"275","messageId":"276","endLine":41,"endColumn":23},{"ruleId":"273","severity":1,"message":"278","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":14},{"ruleId":"273","severity":1,"message":"288","line":11,"column":12,"nodeType":"275","messageId":"276","endLine":11,"endColumn":22},{"ruleId":"273","severity":1,"message":"289","line":11,"column":24,"nodeType":"275","messageId":"276","endLine":11,"endColumn":37},{"ruleId":"290","severity":1,"message":"291","line":35,"column":42,"nodeType":"292","messageId":"293","endLine":35,"endColumn":44},{"ruleId":"273","severity":1,"message":"294","line":3,"column":8,"nodeType":"275","messageId":"276","endLine":3,"endColumn":13},{"ruleId":"273","severity":1,"message":"295","line":5,"column":10,"nodeType":"275","messageId":"276","endLine":5,"endColumn":25},{"ruleId":"273","severity":1,"message":"296","line":52,"column":17,"nodeType":"275","messageId":"276","endLine":52,"endColumn":21},{"ruleId":"273","severity":1,"message":"294","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"273","severity":1,"message":"297","line":3,"column":32,"nodeType":"275","messageId":"276","endLine":3,"endColumn":45},{"ruleId":"298","severity":1,"message":"299","line":276,"column":19,"nodeType":"300","messageId":"301","endLine":276,"endColumn":26,"fix":"302"},{"ruleId":"273","severity":1,"message":"294","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"273","severity":1,"message":"296","line":10,"column":15,"nodeType":"275","messageId":"276","endLine":10,"endColumn":19},{"ruleId":"273","severity":1,"message":"296","line":27,"column":15,"nodeType":"275","messageId":"276","endLine":27,"endColumn":19},{"ruleId":"273","severity":1,"message":"296","line":80,"column":15,"nodeType":"275","messageId":"276","endLine":80,"endColumn":19},{"ruleId":"298","severity":1,"message":"299","line":94,"column":16,"nodeType":"300","messageId":"301","endLine":94,"endColumn":23,"fix":"303"},{"ruleId":"298","severity":1,"message":"299","line":107,"column":16,"nodeType":"300","messageId":"301","endLine":107,"endColumn":23,"fix":"304"},{"ruleId":"273","severity":1,"message":"296","line":126,"column":15,"nodeType":"275","messageId":"276","endLine":126,"endColumn":19},{"ruleId":"273","severity":1,"message":"296","line":144,"column":15,"nodeType":"275","messageId":"276","endLine":144,"endColumn":19},{"ruleId":"298","severity":1,"message":"299","line":150,"column":28,"nodeType":"305","messageId":"301","endLine":150,"endColumn":39,"fix":"306"},{"ruleId":"273","severity":1,"message":"296","line":169,"column":15,"nodeType":"275","messageId":"276","endLine":169,"endColumn":19},{"ruleId":"290","severity":1,"message":"307","line":174,"column":20,"nodeType":"292","messageId":"293","endLine":174,"endColumn":22},{"ruleId":"273","severity":1,"message":"294","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":61,"column":16,"nodeType":"300","messageId":"301","endLine":61,"endColumn":23,"fix":"308"},{"ruleId":"273","severity":1,"message":"294","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"273","severity":1,"message":"294","line":1,"column":8,"nodeType":"275","messageId":"276","endLine":1,"endColumn":13},{"ruleId":"273","severity":1,"message":"296","line":47,"column":13,"nodeType":"275","messageId":"276","endLine":47,"endColumn":17},{"ruleId":"273","severity":1,"message":"295","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":25},{"ruleId":"273","severity":1,"message":"278","line":2,"column":10,"nodeType":"275","messageId":"276","endLine":2,"endColumn":14},{"ruleId":"273","severity":1,"message":"278","line":3,"column":10,"nodeType":"275","messageId":"276","endLine":3,"endColumn":14},"@typescript-eslint/no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'Link' is defined but never used.","'SetCoordinateType' is defined but never used.","'GetPositions' is defined but never used.","'chooseAll' is assigned a value but never used.","'useLocation' is defined but never used.","'DeleteDirectory' is defined but never used.","'fetchAdress' is assigned a value but never used.","'navigate' is assigned a value but never used.","'successMarker' is assigned a value but never used.","'stopLogging' is defined but never used.","'actionlist' is assigned a value but never used.","'setActionList' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'React' is defined but never used.","'informLabChoise' is defined but never used.","'data' is assigned a value but never used.","'passDataAsMap' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","CallExpression","useLiteral",{"range":"309","text":"310"},{"range":"311","text":"310"},{"range":"312","text":"310"},"NewExpression",{"range":"313","text":"310"},"Expected '===' and instead saw '=='.",{"range":"314","text":"310"},[8188,8195],"[]",[1963,1970],[2301,2308],[3276,3287],[1642,1649]]