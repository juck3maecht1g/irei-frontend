[{"/home/sihi/irei-frontend/src/index.tsx":"1","/home/sihi/irei-frontend/src/BackButton.tsx":"2","/home/sihi/irei-frontend/src/controlPages/ControlPage.tsx":"3","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx":"4","/home/sihi/irei-frontend/src/settings/Settings.tsx":"5","/home/sihi/irei-frontend/src/controlPages/ActionPage/ChooseListPage.tsx":"6","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx":"7","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseRobotPage.tsx":"8","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetTimePage.tsx":"9","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetCustomPage.tsx":"10","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ActionKindPage.tsx":"11","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseActionlistAsAction.tsx":"12","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseMultipleGripper.tsx":"13","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx":"14","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/RobotPositionPage.tsx":"15","/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx":"16","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx":"17","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/MappingRobots.tsx":"18","/home/sihi/irei-frontend/src/TopBar.tsx":"19","/home/sihi/irei-frontend/src/controlPages/GripperButton.tsx":"20","/home/sihi/irei-frontend/src/controlPages/SavePositionButton.tsx":"21","/home/sihi/irei-frontend/src/controlPages/LoggerButton.tsx":"22","/home/sihi/irei-frontend/src/controlPages/ResetButton.tsx":"23","/home/sihi/irei-frontend/src/controlPages/EmergencyExit.tsx":"24","/home/sihi/irei-frontend/src/controlPages/ModeButton.tsx":"25","/home/sihi/irei-frontend/src/controlPages/ActionListButton.tsx":"26","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx":"27","/home/sihi/irei-frontend/src/PopUp/NamingPopUp.tsx":"28","/home/sihi/irei-frontend/src/backendComunication/FetchRobots.tsx":"29","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionFetch.tsx":"30","/home/sihi/irei-frontend/src/PopUp/ErrorPopUP.tsx":"31","/home/sihi/irei-frontend/src/backendComunication/BasicOpperations.tsx":"32","/home/sihi/irei-frontend/src/PopUp/PopUp.tsx":"33","/home/sihi/irei-frontend/src/backendComunication/SetRobots.tsx":"34","/home/sihi/irei-frontend/src/backendComunication/FetchAndSetDirExp.tsx":"35","/home/sihi/irei-frontend/src/choosePages/ChooseRobotButton.tsx":"36","/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx":"37","/home/sihi/irei-frontend/src/backendComunication/FetchAndSetLab.tsx":"38","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx":"39","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotsForMapping.tsx":"40","/home/sihi/irei-frontend/src/NavigationButton.tsx":"41","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegistered.tsx":"42"},{"size":3177,"mtime":1677172195604,"results":"43","hashOfConfig":"44"},{"size":591,"mtime":1677080738068,"results":"45","hashOfConfig":"44"},{"size":6103,"mtime":1677161361345,"results":"46","hashOfConfig":"44"},{"size":4289,"mtime":1677185668218,"results":"47","hashOfConfig":"44"},{"size":317,"mtime":1676902500285,"results":"48","hashOfConfig":"44"},{"size":3041,"mtime":1677161361345,"results":"49","hashOfConfig":"44"},{"size":3539,"mtime":1677161361345,"results":"50","hashOfConfig":"44"},{"size":2811,"mtime":1677161361345,"results":"51","hashOfConfig":"44"},{"size":2008,"mtime":1677185668218,"results":"52","hashOfConfig":"44"},{"size":2137,"mtime":1677161361345,"results":"53","hashOfConfig":"44"},{"size":2516,"mtime":1677185668218,"results":"54","hashOfConfig":"44"},{"size":1668,"mtime":1677161361345,"results":"55","hashOfConfig":"44"},{"size":2757,"mtime":1677094355922,"results":"56","hashOfConfig":"44"},{"size":2100,"mtime":1676889472584,"results":"57","hashOfConfig":"44"},{"size":2079,"mtime":1677185668218,"results":"58","hashOfConfig":"44"},{"size":4975,"mtime":1677139383262,"results":"59","hashOfConfig":"44"},{"size":2224,"mtime":1677139383262,"results":"60","hashOfConfig":"44"},{"size":3484,"mtime":1677139383262,"results":"61","hashOfConfig":"44"},{"size":4971,"mtime":1677185668218,"results":"62","hashOfConfig":"44"},{"size":1001,"mtime":1677185668218,"results":"63","hashOfConfig":"44"},{"size":1353,"mtime":1677185668218,"results":"64","hashOfConfig":"44"},{"size":2940,"mtime":1677185668218,"results":"65","hashOfConfig":"44"},{"size":862,"mtime":1677185668218,"results":"66","hashOfConfig":"44"},{"size":807,"mtime":1677185668218,"results":"67","hashOfConfig":"44"},{"size":1305,"mtime":1676451976898,"results":"68","hashOfConfig":"44"},{"size":2371,"mtime":1677186676653,"results":"69","hashOfConfig":"44"},{"size":3382,"mtime":1677086286871,"results":"70","hashOfConfig":"44"},{"size":1962,"mtime":1677185668218,"results":"71","hashOfConfig":"44"},{"size":1826,"mtime":1677080738072,"results":"72","hashOfConfig":"44"},{"size":9643,"mtime":1677087338160,"results":"73","hashOfConfig":"44"},{"size":742,"mtime":1677185668218,"results":"74","hashOfConfig":"44"},{"size":3932,"mtime":1677092935662,"results":"75","hashOfConfig":"44"},{"size":275,"mtime":1676886184374,"results":"76","hashOfConfig":"44"},{"size":2162,"mtime":1677100359393,"results":"77","hashOfConfig":"44"},{"size":5069,"mtime":1677093056955,"results":"78","hashOfConfig":"44"},{"size":978,"mtime":1676368735165,"results":"79","hashOfConfig":"44"},{"size":558,"mtime":1677139383262,"results":"80","hashOfConfig":"44"},{"size":1527,"mtime":1677080738068,"results":"81","hashOfConfig":"44"},{"size":928,"mtime":1676368735165,"results":"82","hashOfConfig":"44"},{"size":1539,"mtime":1677139383262,"results":"83","hashOfConfig":"44"},{"size":520,"mtime":1677139383262,"results":"84","hashOfConfig":"44"},{"size":2032,"mtime":1677139383262,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ow93vw",{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"191","usedDeprecatedRules":"92"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":3,"source":"198","usedDeprecatedRules":"92"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"92"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"92"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},"/home/sihi/irei-frontend/src/index.tsx",[],[],"/home/sihi/irei-frontend/src/BackButton.tsx",[],[],[],"/home/sihi/irei-frontend/src/controlPages/ControlPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx",["235","236"],[],"import React from 'react';\nimport {useState} from 'react';\nimport { TopBarChooseList } from '../../TopBar';\nimport ActionlistButton from './ActionlistButton';\nimport { Link, useNavigate } from 'react-router-dom';\nimport '../../irei_styles.css'\nimport { GetActionListContent, DeleteAction, SetMappingPos } from './ActionFetch';\n\n/**\n * The ActionListPage is used to edit a list of actions by adding new action and deleting others\n */\nexport default function ActionListPage () {\n    var navigate = useNavigate()\n    const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n    const [error, setError] = useState(false)\n    const errorState = () => {\n        setError(current => !current)\n    }\n    const sentPos = (index) => {\n        SetMappingPos(index, errorState, setErrorMessage).then(res => {\n            if (res) {\n                navigate(\"/MappingRobotsPage\")\n            }\n        })\n    }\n    \n    const [actionlist, setActionlist] = useState(test); //test\n    GetActionListContent(setActionlist)\n    console.log(actionlist)\n    const deleteAction = (position) => {\n        DeleteAction(errorState, position, setErrorMessage).then(res => {\n            if(res) {\n                window.location.reload();\n            }\n        });\n    }\n    \n    return ( \n        \n        <div>\n        <div className=\"test\">\n            <TopBarChooseList title=\"Actionlist\" />\n                <Link to={\"/MappingRobotsPage\"}\n                    state = {{index: [-1]}}>\n                    <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={() => {sentPos([-1])}}>\n                        edit mapping\n                    </button>\n                </Link>\n            {\n                actionlist.map((currElement, index) => {\n                    var listIndex = [index];\n                    return <div className=\"action-list-grid\">\n                        <ActionlistButton key={index} element={currElement} listPlace={listIndex}/>\n                        <button onClick={() =>deleteAction(index)} className=\"icon-button  mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n                            <i className=\"material-icons\">delete</i>\n                        </button>\n                    </div>\n                })\n            }\n        \n            <Link to = {\"/ActionKindPage\"}>\n                <button className=\"icon-button  mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n                <i className=\"material-icons\">playlist_add</i>\n                </button>\n            </Link>\n        \n            \n        </div>\n            <div>\n                <Link to = {\"/ControlPage\"}>\n                    <button className=\"irei-back-button icon-button  mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n                    <i className=\"material-icons\">arrow_back</i>\n                    </button>\n                </Link>\n            </div>\n        </div>\n\n     );\n}\n\n\nvar position = new Map()\n    position.set(\"name\", \"bett\")\n     position.set(\"coordinates\", new Map([[\"?????\", 234634]]))\nvar robot = new Map ()\n    robot.set(\"name\", \"bot1\")\n     robot.set(\"ip\", 1)\nvar closeGripper = new Map()\n    closeGripper.set(\"key\", \"close_gripper\")\n     closeGripper.set(\"robots\", [robot])\nvar openGripper = new Map()\n    openGripper.set(\"key\", \"open_gripper\")\n     openGripper.set(\"robots\", [robot])   \nvar custom = new Map()\n    custom.set(\"key\", \"custom\"); custom.set(\"robots\", [robot])\n    custom.set(\"action\", \"tischtennis\")\nvar wait = new Map()\n    wait.set(\"key\", \"wait\"); wait.set(\"robots\", [robot]); wait.set(\"time\", 1235)\nvar move = new Map()\n    move.set(\"key\", \"move\"); move.set(\"robots\", [robot]); move.set(\"position\", position)\nvar sList = new Map()\n    sList.set(\"key\", \"sequential_list\");sList.set(\"name\", \"kochen\"); sList.set(\"content\", [closeGripper, openGripper])\nvar pList = new Map()\n    pList.set(\"key\", \"parallel_list\"); pList.set(\"name\", \"backen\"); pList.set(\"content\", [closeGripper, openGripper, sList])\n\n    var test = [closeGripper]\n    test.push(openGripper); test.push(custom); test.push(wait); test.push(move); test.push(sList); test.push(pList)\n    ","/home/sihi/irei-frontend/src/settings/Settings.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/ChooseListPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx",["237","238","239"],[],"import React from 'react';\nimport { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router-dom\";\nimport {TopBarActionCreate} from '../../../TopBar';\nimport { SetCoordinateType, GetPositions, appendAction, GetCoordinates } from '../ActionFetch';\n\n\n/**\n * The ChooseVariablePage is used to choose \n * a variable for a robot to approach\n */\nexport default function ChooseVariablePage (props) {\n    \n    const navigate = useNavigate();\n    const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n    const [error, setError] = useState(false)\n    const errorState = () => {\n        setError(current => !current)\n    }\n\n    const location = useLocation();\n    const { kind } = location.state;\n    const { ip } = location.state;  \n\n    const [arrayPosition, setPositions] = useState([ new Map()])\n\n    GetCoordinates(setPositions).then(res => {\n      \n    })\n   \n    var [state, setState] = useState(\"joint\");\n    \n    const changeType = () => {\n        var send = state\n        if (state === \"cartesian\") {\n            setState(\"joint\");\n            send = \"joint\"\n        } else {\n            setState(\"cartesian\");\n            send = \"cartesian\"\n        }\n        console.log(\"here\")\n        SetCoordinateType(send, errorState, setErrorMessage);\n        console.log(\"where\")\n        GetPositions(setPositions)\n        console.log(\"done\")\n    }\n    \n    //const arrayPosition = Array.from( positions, function (entry) {\n        //return { key: entry[0], value: entry[1]}})\n\n\n    const buttons = arrayPosition.map((number) => {\n        return  <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n        onClick = {() => {\n            var help = new Map();\n            help.set(\"key\", kind);\n            help.set(\"robot\", ip);\n            help.set(\"position\", number.get(\"name\"))\n            appendAction(errorState, help, setErrorMessage).then(res => {\n                if(res) {\n                    navigate(\"/ActionListPage\");\n                    window.location.reload();\n                }\n            });\n          \n        } }>\n          {number.get(\"name\")}\n          {\"\\n\"}\n          {number.get(\"coordinates\")}\n        </button>\n    })\n\n    const jointButton = <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick = {changeType}> joint </button>\n    const cartButton = <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored\" onClick = {changeType}> cartesian </button>\n\n    return (\n        <div>\n            <TopBarActionCreate title=\"Choose Position\" />\n            {state===\"joint\"? jointButton:cartButton}\n            { buttons}\n        </div>\n    );\n}\n\n\n\n// function PositionButton (props) {\n\n//     const sent = () => {\n//         var help = new Map();\n//         help.set(\"key\", props.kind);\n//         help.set(\"robot\", props.ip);\n//         help.set(\"position\", props.position)\n//         appendAction(props.errorState, help, props.setErrorMessage);\n//     } \n//     console.log(\"props\", props)\n//     return ( \n//     <Link to = {\"/ActionListPage\"}>\n//       <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n//       onClick = {sent}>\n//         {props.name}\n//         {\"\\n\"}\n//         {props.position.get(\"values\")}\n//       </button>\n//     </Link>\n//      );\n//   }","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseRobotPage.tsx",["240","241"],[],"import React, { useState } from 'react'\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { GetExpRobots } from '../../../backendComunication/FetchRobots';\nimport { TopBarActionCreate } from '../../../TopBar';\nimport {appendAction} from '../ActionFetch';\nimport './../../../theme.css'\nimport './../../../irei_styles.css'\n\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseRobotPage(props){\n  \n  const navigate = useNavigate();\n  const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n  const [error, setError] = useState(false)\n  const errorState = () => {\n      setError(current => !current)\n  }\n \n    const location = useLocation();\n    const {action} = location.state;\n    const {link} = location.state;\n    const sentToBackend = (ip) => {\n      if (link === \"/ActionListPage\") {\n        var help = new Map();\n        help.set(\"key\", action);\n        // dirty\n        var ipList = [ip]\n        help.set(\"robot\", ipList)\n        appendAction(errorState, help, setErrorMessage).then(res => {\n          if(res) {  navigate(link, { state: {kind: props.actionKind, ip: [props.data_key]} });\n      window.location.reload();}\n        });\n      }\n      else {\n        // console.log(\"STUFF\", {state: {kind: props.actionKind, ip: [props.data_key]}}, link)\n        // navigate(link,{state: {kind: props.actionKind, ip: [props.data_key]} })\n      }\n    \n    }\n\n    var [robots, setRobots] = useState(test);  //new Map<string, string>()); \n    GetExpRobots(setRobots)\n\n    const arrRobots = Array.from(robots, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n    const buttons = arrRobots.map((number) => {\n      return <RobotButton key={number.key}\n      data_key= {number.key} \n      name= {number.value}\n      actionKind={action}\n      linkTo={link}\n      action={sentToBackend}/>\n    })\n\n    return (\n      <div>\n        <TopBarActionCreate title=\"Choose Robot\"/>\n        <div className='choose-flexbox'>\n        {buttons}\n        </div>\n      </div>\n    )\n}\n\n/**\n * The RobotButton is used to choose \n * the Robot which is displayed from this Button\n */\nfunction RobotButton (props) {\n  console.log(\"link\", props.linkTo)\n  return ( \n    <Link to = {props.linkTo}\n    state = {{kind: props.actionKind, ip: [props.data_key]}}>\n    <button onClick = {() => props.action(props.data_key)}\n        className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n          <div>{props.name}</div>\n          <div>{props.data_key}</div>\n    </button>\n    </Link>\n   );\n}\n\n\nvar test = new Map();\ntest.set(\"123.234.346\", \"ckara\")\ntest.set(\"985.234.346\", \"andre\")\ntest.set(\"444.234.466\", \"tessa\")\ntest.set(\"333.356.346\", \"hannah\")\n","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetTimePage.tsx",["242","243","244"],[],"import React from 'react';\nimport { useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { appendAction } from '../ActionFetch';\nimport {TopBarActionCreate} from '../../../TopBar';\n\nexport default function SetTimePage() {\n    const navigate = useNavigate();\n    const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n    const [error, setError] = useState(false)\n    const errorState = () => {\n        setError(current => !current)\n    }\n    const [time, setTime] = useState('0')\n\n    const location = useLocation();\n    const { kind } = location.state;\n    const { ip } = location.state;\nconsole.log(\"custumLoc\", kind)\n\n    const sentToBackend = () => {\n        console.log(\"hi\")\n        var actionParameters = new Map<string, string>();\n        actionParameters.set(\"key\", kind);\n        actionParameters.set(\"robot\", ip);\n        actionParameters.set(\"time\", time);\n        appendAction(errorState, actionParameters, setErrorMessage).then(res => {\n            if(res) {\n                navigate(\"/ActionListPage\")\n                window.location.reload();\n            }\n        });\n    }\n\n    return (\n        <div>\n            <TopBarActionCreate title=\"Custom Name\"/>\n            <form className= \"form-settings\">\n                <div>\n                    <label>please set a time in seconds:</label>\n                </div>\n                <div>\n                    <input\n                        type= \"number\"\n                        required\n                        value= {time}\n                        onChange = {(e) => setTime(e.target.value)}\n                    />\n                </div>\n                <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"  type =\"button\"\n                        onClick = {sentToBackend}>\n                        <i className='material-icons'>check</i>\n                </button>\n            </form>\n        </div>\n    )\n}","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/SetCustomPage.tsx",["245","246","247"],[],"import React from 'react';\nimport { useState } from 'react';\nimport { useLocation, Link, useNavigate } from 'react-router-dom';\nimport { appendAction } from '../ActionFetch';\nimport {TopBarActionCreate} from '../../../TopBar';\nimport './../../../theme.css'\nimport './../../../irei_styles.css'\n\nexport default function SetCustomPage() {\n    const navigate = useNavigate();\n    const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n    const [error, setError] = useState(false)\n    const errorState = () => {\n        setError(current => !current)\n    }\n    const [name, setName] = useState(\"\")\n\n\n    \n    const location = useLocation();\n    const { kind } = location.state;\n    const { ip } = location.state;\n\n    const sentToBackend = () => {\n        console.log(\"nameContent\", name)\n        var actionParameters = new Map<string, string>();\n        actionParameters.set(\"key\", kind);\n        actionParameters.set(\"robot\", ip);\n        actionParameters.set(\"action\",name);\n        \n        appendAction(errorState, actionParameters, setErrorMessage).then(res => {\n            console.log(res)\n            if(res) {\n                navigate(\"/ActionListPage\");\n                window.location.reload();\n            }\n        }); \n    }\n\n    return (\n        <div>\n            <TopBarActionCreate title=\"Custom Name\"/>\n            <form className= \"form-settings\">\n                <div>\n                    <label>please enter the name of the custom action:</label>\n                </div>\n                <div>\n                    <input \n                        type= \"text\"\n                        //required\n                        value= {name}\n                        onChange = {(e) => setName(e.target.value)}\n                    />\n                </div>\n                <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" type=\"button\"\n                    onClick = {\n                        sentToBackend}> \n                    <i className='material-icons'>check</i>\n                </button>\n            </form>\n        </div>\n    )\n}","/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ActionKindPage.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseActionlistAsAction.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseMultipleGripper.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx",["248"],[],"import React, { useState } from 'react'\nimport TopBar from '../../TopBar';\nimport ChooseButton from '../ChooseRobotButton';\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\nimport { SetExpRobots } from '../../backendComunication/SetRobots';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport './../../theme.css'\nimport './../../irei_styles.css'\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseExperimentRobots(){\n    const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\")\n    const [error, setError] = useState(false)\n    const location = useLocation();\n    const { from } = location.state;\n\n    var chosen =  new Map<string, string>() // the chosen robots \n    const errorState = () => {\n        setError(current => !current)\n       }\n\n    const clickedBot = (ip, name) => {\n        if (chosen.has(ip))  {\n            chosen.delete(ip)\n        } else {\n            chosen.set(ip,name)\n        }\n     \n    }\n\n    const confirm = () => {\n       SetExpRobots(errorState, chosen, setErrorMessage)\n    }\n\n    const buttons = from.map((number) => { \n        return <ChooseButton name={number.value} \n        ip={number.key}\n        action = {clickedBot}\n        state = {false}/>\n    })\n\n\n    const chooseAll = () => { // toDo funktioniert noch nicht\n        for(var i = 0;i<from.length;i++) { \n           if (!chosen.has(from[i].key)) {\n            chosen.set(from[i].key,from[i].value)\n           }\n         }\n    }\n\n    return ( \n        <div>\n        <TopBar title=\"Choose Robots\"></TopBar>\n        {buttons}\n        <Link \n            to = {\"/ChooseExperimentRegister\"}\n        >\n            <button className=\"icon-button irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n             onClick={confirm}>\n                <i className=\"material-icons\">check</i>\n             </button>\n        </Link>\n        <ErrorPopUp active={error} deactivate={errorState} message={errorMessage}/>\n        </div>\n    );\n}","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/RobotPositionPage.tsx",["249","250","251","252"],[],"import React, { useState } from 'react'\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { GetExpRobots } from '../../backendComunication/FetchRobots';\nimport TopBar from '../../TopBar';\nimport { SetSavePositionRobot } from '../../backendComunication/SetRobots';\n\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function RobotPositionPage(props){\n  var navigate = useNavigate()\n  const [errorMessage, setErrorMessage] = useState(\"sorry position could not be saved\")\n  const [error, setError] = useState(false)\n  const errorState = () => {\n      setError(current => !current)\n    }\n\n    const changerobots = (ip) => {\n      console.log(\"hi\")\n      SetSavePositionRobot(errorState, ip, setErrorMessage).then(res => {\n        if(res){\n          navigate(\"/Controlpage\")\n        }\n      })\n    }\n\n    var [robots, setRobots] = useState(test); //new Map<string, string>()\n    GetExpRobots(setRobots)\n\n    const arrRobots = Array.from(robots, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n    const buttons = arrRobots.map((number) => {\n      return <RobotButton key={number.key} data_key={number.key} name= {number.value} execute={changerobots}/>\n    })\n\n    return (\n      <div className='choose-flexbox'>\n        <TopBar title=\"Choose Robot\"/>\n        {buttons}\n      </div>\n    )\n}\n\n/**\n * The RobotButton is used to choose \n * the Robot which is displayed from this Button\n */\nfunction RobotButton (props) {\n\n  return (   // noch zurückschicken wenn Gripper\n    \n        <button onClick = {()=>props.execute(props.data_key)}\n        className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n          <div>{props.name}</div>\n          <div>{props.data_key}</div>\n        </button>\n  \n   );\n}\n\nvar test = new Map();\ntest.set(\"123.234.346\", \"clara\")\ntest.set(\"985.234.346\", \"andre\")\ntest.set(\"444.234.466\", \"tessa\")\ntest.set(\"333.356.875\", \"hannah\")\ntest.set(\"875.356.234\", \"julie\")\ntest.set(\"024.444.346\", \"dominik\")","/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx",["253"],[],"import React from 'react'\nimport {useState} from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport TopBar from '../../TopBar';\nimport DirectoryButton from './DirectoryButton';\nimport { GetDirectories, NavigateDown, NavigateUP, Create, DeleteDirectory, BaseNameDir, confirmDirChoise, GetPath, IsTop } from '../../backendComunication/FetchAndSetDirExp';\nimport { NamingPopUp } from '../../PopUp/NamingPopUp';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport './../../theme.css'\nimport './../../irei_styles.css'\n\n/**\n * The ChooseDirectoryPage is used to navigate in a Datastructure\n * and choose a directory\n */\nexport default function ChooseDirectoryPage () {\n    const navigate = useNavigate();\n    const [directories, setDirectories] = useState(new Map<String,[]>());\n    const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\")\n    const [error, setError] = useState(false)\n    var [popUpName, setPopUpName] = useState(false);\n    var [path, setPath] = useState(\"\");\n    GetDirectories(setDirectories);\n\n    const errorState = () => {\n        setError(current => !current)\n       }\n\n    const createDir = (action, name, setErrorMessage) => {\n          Create(action, name, setErrorMessage).then(res => {\n            if(res) {\n                navigate(\"/ChooseLaboratoryPage\")\n            }\n        }\n        )\n    }\n\n    const navUp = () => {\n        NavigateUP(errorState,setErrorMessage).then(res => {\n            if(res) {\n            window.location.reload()\n            }\n        })\n    }\n\n    const navDown = (name) => {\n        NavigateDown( errorState, name, setErrorMessage).then(res => {\n            if(res) {\n            window.location.reload()\n            }\n        })\n    }\n    \n    const confirmChoise = () => {\n        confirmDirChoise(errorState, setErrorMessage).then(res => {\n            if(res) {\n                navigate(\"/ControlPage\")\n            }\n        }\n        )\n    }\n\n    const getPath = () => {\n        GetPath(setPath)\n    }\n    getPath()\n\n    const activatePopup = () => {\n        setPopUpName(current => !current)\n    }\n\n    const [top, setTop] = useState(false)\n    IsTop(setTop)\n\n    const notTop = <div className=\"flexbox\">\n        <div>\n            <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            onClick = {()=> setPopUpName(true)}>\n                <i className=\"material-icons\">add</i>\n            </button>\n        </div>\n        <div>\n            <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n                        onClick = {navUp}>\n                            navigate up\n            </button>\n        </div>\n        <div>\n            <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={confirmChoise}>\n                <i className=\"material-icons\">check</i>\n            </button>\n        </div>\n    </div>\n\n    const isTop = <div className=\"flexbox\">\n        <div>\n            <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            onClick = {()=> setPopUpName(true)}>\n                <i className=\"material-icons\">add</i>\n            </button>\n        </div>\n        <div>\n            <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" disabled>\n                            navigate up\n            </button>\n        </div>\n        <div>\n            <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" disabled>\n                <i className=\"material-icons\">check</i>\n            </button>\n        </div>\n    </div>\n\n    return ( \n        <div>\n            <TopBar title=\"Choose Directory\"></TopBar>\n            <div >\n                <div className=\"choose-flexbox\">\n                    {\n                        directories.get(\"to_navigate\")?.map((number) => {\n                        return <DirectoryButton name={number} action={navDown}/>\n                        })\n                    }\n                </div>\n                <div className=\"grid directory-grid\">\n                    <div>\n                        <p className=\"irei-path\">\n                            cwd: {path}\n                        </p>\n                    </div>\n                </div>\n                <div >\n                    \n                    {top? isTop:notTop}\n                    <NamingPopUp active = {popUpName} deactivate={activatePopup} forErrors={errorState}\n                        confirm={createDir} getBaseName={BaseNameDir} errorMessage={setErrorMessage}/>\n                    <ErrorPopUp active={error} deactivate={errorState} message={errorMessage}/>\n                    \n                </div>\n            </div>\n            \n        </div>\n     );\n}\n","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx",["254","255"],[],"import React from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getLabs, informLabChoise } from '../../backendComunication/FetchAndSetLab';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport TopBar from '../../TopBar';\nimport ChooseLaboratoryButton from './ChooseLaboratoryButton';\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport default function ChooseLaboratoryPage() {\n  const navigate = useNavigate();\n  const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\")\n  const [error, setError] = useState(false)\n    const [labs, setLabs] = useState(new Map<string, Map<string, string>>()); // key = labname, value = robot list\n    var [fetched, setfetched] = useState(false)\n    getLabs(setLabs, fetched, setfetched)\n\n    const errorState = () => {\n      setError(current => !current)\n     }\n\n\n    const arrLabs = Array.from(labs, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n\n    const action = (name) => {  \n      informLabChoise(errorState,name, setErrorMessage).then(res => {\n      if(res) {\n          \n      }\n  }\n  )\n    }\n\n    const robots = (key) => {\n     return Array.from(labs.get(key), function (entry) {\n      return { key: entry[0], value: entry[1]}})\n    }\n\n\n       return ( \n      <div >\n        <TopBar title=\"Choose Laboratory\"></TopBar>\n        <div className='choose-flexbox'>\n        {\n          arrLabs.map((number) => {\n            return <ChooseLaboratoryButton name={number.key} action={action}\n            buttons = {robots} />\n          })\n        }\n        </div>\n         <ErrorPopUp active={error} deactivate={errorState} message={errorMessage}/>\n      </div>\n    );\n}\n\n/**\n * //shema für labornamen \n    for (let key of labs.keys()) {\n      console.log(key) //laborname\n    }\n\n    // shema um roboter namen zu kriegen\n    for (let key of labs.keys()) {\n      if(typeof labs.get(key) != \"undefined\") {\n        for (let koy of labs.get(key).keys()) { // is catched one line above\n          console.log(koy); // roboternamen\n      }          \n      }\n\n    }\n */\n\n\n   ","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/MappingRobots.tsx",[],[],"/home/sihi/irei-frontend/src/TopBar.tsx",["256"],[],"import React from \"react\"\nimport {useState} from 'react';\nimport './theme.css'\nimport './irei_styles.css'\nimport 'material-icons'\nimport { Link } from \"react-router-dom\";\nimport NavigationButton from './NavigationButton';\n\nfunction TopBar(props) {\n\n  const [isActive, setIsActive] = useState(false);\n\n  const handleClick = event => {\n    // 👇️ toggle isActive state on click\n    setIsActive(current => !current);\n  };\n\n  return(\n    <div className ='bar'>\n      <div className=\"title_wrapper\">\n        <p className=\"title\">\n          {props.title}\n        </p> \n      </div>\n\n      <div className='wrapper'>\n        \n        <button id=\"menu\" className=\"mdl-button mdl-js-button mdl-button--icon\" onClick={handleClick}>\n          <i className=\"material-icons\">more_vert</i>\n        </button>\n\n        <div id='nav-list-container'className= {isActive ? \"mdl-menu__container is-visible\" : \"mdl-menu__container\"}>\n          <ul id=\"nav-list\" className=\"mdl-menu__outline mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect\"\n            htmlFor=\"menu\">\n\n            {/*<li className=\"mdl-menu__item nav-list-item\">\n              <Link to='/Control' state={{ from: \"Burgermenu\"}} //erst noch mit links maybe weg\n                  className=\"\">\n                        wewrgetrztu\n            </Link>\n            </li>*/}\n\n            {props.children}\n          </ul>\n        </div>\n\n      </div>\n      \n    </div>\n    \n  )\n}\n\nexport default TopBar\n\nexport function TopBarAll (props) {\n    return (\n        <TopBar title={props.title}>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Control\" destinationLink=\"/ControlPage\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Directory\" destinationLink=\"/\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Laboratory\" destinationLink=\"/ChooseLaboratoryPage\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Experiment\" destinationLink=\"/ChooseExperimentRegistered\"></NavigationButton>\n            </li>\n            {/*<li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Settings\" destinationLink=\"/Settings\"></NavigationButton>\n            </li>*/}\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Change Gripper Robots\" destinationLink=\"/GripperRobots\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Change Position Robot\" destinationLink=\"/SavePositionRobot\"></NavigationButton> \n            </li>\n        </TopBar>\n    )\n}\n\nexport function TopBarControl (props) {\n    return (\n        <TopBar title={props.title}>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Directory\" destinationLink=\"/\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Laboratory\" destinationLink=\"/ChooseLaboratoryPage\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Choose Experiment\" destinationLink=\"/ChooseExperimentRegistered\"></NavigationButton>\n            </li>\n            {/*<li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Settings\" destinationLink=\"/Settings\"></NavigationButton>\n            </li>*/}\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Change Gripper Robots\" destinationLink=\"/GripperRobots\"></NavigationButton>\n            </li>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Change Position Robot\" destinationLink=\"/SavePositionRobot\"></NavigationButton> \n            </li>\n        </TopBar>\n    )\n}\n\nexport function TopBarChooseList (props) {\n    return (\n        <TopBar title={props.title}>\n            <li className=\"mdl-menu__item nav-list-item\">\n              <NavigationButton destination=\"Control\" destinationLink=\"/ControlPage\"></NavigationButton>\n            </li>\n        </TopBar>\n    )\n}\n\nexport function TopBarActionCreate (props) {\n  return (\n      <TopBar title={props.title}>\n          <li className=\"mdl-menu__item nav-list-item\">\n            <NavigationButton destination=\"Control\" destinationLink=\"/ControlPage\"></NavigationButton>\n          </li>\n          <li className=\"mdl-menu__item nav-list-item\">\n            <NavigationButton destination=\"ActionList\" destinationLink=\"/ActionListPage\"></NavigationButton>\n          </li>\n      </TopBar>\n  )\n}","/home/sihi/irei-frontend/src/controlPages/GripperButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/SavePositionButton.tsx",["257"],[],"import React, { useState } from 'react'\nimport { passDataDirect, post } from '../backendComunication/BasicOpperations'\nimport './../theme.css'\nimport './../irei_styles.css'\nconst fetchAdress = \"http://127.0.0.1:5000/api/savePosition\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_save_position\"\nconst savePositionMassage = \"savePosition\"\nconst successMarker = \"Done\"\n\nexport function informSavePosition(action, name, setErrorMessage) {\n    var to_post = new Map()\n    to_post.set(\"marker\", savePositionMassage)\n    to_post.set(\"name\", name)\n    const result = Object.fromEntries(to_post)\n    post(result, fetchAdress).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n        }\n    })\n}\n/**\n * The SavePositionButton is used to save a Position \n * for later use\n */\nfunction SavePositionButton (props) {\n    return ( \n        <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" \n            onClick={props.action}>\n            \n            <i className='material-icons'>archive</i>save position\n        </button>\n     );\n}\n\n \nexport default SavePositionButton;\n\n\nexport function BaseNamePosition(setName) {\n    var [fetched, setFetched] = useState(false) \n    passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}","/home/sihi/irei-frontend/src/controlPages/LoggerButton.tsx",["258"],[],"import React, { useState } from 'react';\nimport { passDataDirect, post } from '../backendComunication/BasicOpperations';\nimport './Control.css';\nimport './../theme.css'\nimport './../irei_styles.css'\nimport {TopBarControl }from './../TopBar';\nimport TopBar from './../TopBar';\n\nconst fetchAdressStop = \"http://127.0.0.1:5000/api/stop\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_stop\"\nconst stopMessage = \"stop\"\nconst fetchAdressStart = \"http://127.0.0.1:5000/api/start\"\nconst startMessage = \"start\"\nconst fetchAdressCancel = \"http://127.0.0.1:5000/api/cancel\"\nconst cancelMessage = \"cancel\"\n\n\nexport function postLoggingStop(errorfunction, name, setErrorMessage, started) {\n  var to_post = new Map()\n  to_post.set(\"marker\", stopMessage)\n  to_post.set(\"name\", name)\n  const result = Object.fromEntries(to_post)\n  post(result, fetchAdressStop).then(\n    res => {\n      console.log(started)\n      if(res !== \"Done\") {\n          setErrorMessage(res)\n          errorfunction()\n      }else {\n        started()\n      }\n    }\n  )\n}\n\nexport function BaseNameStop(setName) {\n  var [fetched, setFetched] = useState(false) \n  passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}\n\nexport default function LoggerButton (props) {\n\n  function stopLogging() {\n    props.action();\n  }\n\n  function startLogging() {\n    post(startMessage, fetchAdressStart).then(\n      res => {\n        if(res !== \"Done\") {\n            props.errorMessage(res)\n            props.errorfunction()\n        }\n        else {\n          props.action();\n        } \n      }\n    )\n \n  }\n\n  function cancelLogging() {\n    post(cancelMessage, fetchAdressCancel).then(\n      res => {\n        if(res !== \"Done\") {\n          console.log(res)\n          props.errorMessage(res)\n          props.errorfunction()\n        }\n        else {\n          props.action();\n      }\n      }\n    )\n  \n  }\n\n  const start = (\n    <div>\n       <TopBarControl title=\"Control\"/>\n      <button id=\"start-log\"className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" \n        onClick={startLogging}>\n        \n        <i className='material-icons'>play_arrow</i>Start\n      </button>\n    </div>\n      \n  )\n\n  const stop = (\n    <div>\n      <TopBar title=\"Control\"/>\n      <div className='flexbox'>\n      <button id=\"stop-log\" className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n        onClick={\n        () => {\n          props.stoped()\n        }\n        }>\n        \n        <i className='material-icons'>stop</i>Stop\n      </button>\n      <button id=\"abbort-log\" className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n       onClick={cancelLogging}>\n        \n        <i className='material-icons'>cancel</i>Abort\n      </button>\n    </div>\n    </div>\n    \n  )\n\n  return (\n    <>\n    {props.state ? stop : start}\n    </>\n  )\n};","/home/sihi/irei-frontend/src/controlPages/ResetButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/EmergencyExit.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ModeButton.tsx",[],[],"/home/sihi/irei-frontend/src/controlPages/ActionListButton.tsx",["259"],[],"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ExecuteActionList, SetButtonIndex } from './ActionPage/ActionFetch';\nimport './../irei_styles.css'\n\nexport default function ActionListButton (props) {\n    const navigate = useNavigate();\n    //const [actionlist, setActionList] = useState(\"\")\n\n    const execute = ()=> {\n        informPosition()\n        ExecuteActionList(props.list, props.errorfunction, props.errorMessage)\n\n    }\n\n\n    const edit = async () => {\n        if(await informPosition()) {\n            navigate(\"/ActionListPage\")\n        }\n    }\n\n    const swap = async () => {\n        if(await informPosition()) {\n            navigate(\"/ChooseListPage\")\n        }\n    }\n\n    const informPosition = async () => {\n        var reload = false\n        await SetButtonIndex(props.index, props.errorfunction, props.setErrorMessage).then(res => {\n            reload = res\n        })\n        return reload\n    }\n\n\n    const disabledEdit = <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" disabled>\n    <i className=\"material-icons\">edit</i>\n    </button>\n\n    const editButton = <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={edit}>\n    <i className=\"material-icons\">edit</i>\n    </button>\n\n    return (\n        <div className=\"flexbox\">\n            <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" \n                onClick={execute}>\n                <div>\n                   {props.list}\n                </div>\n            </button>\n            {props.list == \"name\"? disabledEdit:editButton}\n            <button className=\"icon-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={swap}>\n                <i className=\"material-icons\">settings</i> \n            </button>\n          \n        </div>\n    )\n}\n\n\n\n/*\n<button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" \n                    onClick={()=>setChoosing(true)}>\n                    edit\n            </button>\n\n            <Popup trigger= {choosing}>\n                <ChooseListPage execute={setActionList} close={informPosition}/>\n            </Popup>\n*/","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx",[],[],"/home/sihi/irei-frontend/src/PopUp/NamingPopUp.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/FetchRobots.tsx",["260","261","262"],[],"// this file contains multiple methods used to fetch robots from the backend\n\nimport React from \"react\"\nimport { useState } from \"react\"\nimport { informLabChoise } from \"./FetchAndSetLab\"\n\n\n\nconst fetchAdressGripperRobots = \"http://127.0.0.1:5000/api/getRobotsForGripper\" \nconst fetchAdressLabRobots = \"http://127.0.0.1:5000/api/getRobotsOfLab\"\nconst fetchAdressExpRobots = \"http://127.0.0.1:5000/api/getRobotsInExperiment\"\n\n\n\n//gets the robots chosen for gripper on controll page\n\nexport async function GetGripperRobots(setRobots){\n    var [fetched, setfetched] = useState(false) \n    getRobots(setRobots, fetched, setfetched, fetchAdressGripperRobots)\n \n    \n  }\n  \n\n  //gets the robots chosen for experiment\n  export async function GetExpRobots(setRobots){\n      var [fetched, setfetched] = useState(false) \n      getRobots(setRobots, fetched, setfetched, fetchAdressExpRobots)\n    }\n\n\n\n    export async function GetLabRobots(setRobots, labName){\n        var [fetched, setfetched] = useState(false) \n        getRobots(setRobots, fetched, setfetched, fetchAdressLabRobots)\n      }\n\n  /** gets a list of robots from the specified adress and sublies them ad map to the specified usestate\n   * \n   * @param setRobots \n   * @param fetched \n   * @param setfetchedRobots \n   * @param adress \n   * @returns \n   */\n    async function getRobots(setRobots, fetched, setfetched, adress){\n      \n      if(fetched) {\n          return\n        }\n         setfetched (true)\n          const data = await (\n            await fetch(\n              adress\n            )\n          ).json().then(data => {\n                var robots = new Map()\n                for(let j = 0; j < data.length; j++) {\n                  robots.set(data[j].ip, data[j].name)\n                }\n            \n            setRobots(robots)\n          }\n          )\n      }","/home/sihi/irei-frontend/src/controlPages/ActionPage/ActionFetch.tsx",["263","264","265"],[],"import React from \"react\"\nimport { useState } from \"react\"\nimport { passDataDirect, post, passDataAsMap, convertBackToFrontMapping, convertFrontToBackMapping, passDataForActionMapping, passDatalenght, passDataCoordinates, post2 } from \"../../backendComunication/BasicOpperations\"\n\nconst fetchAdressAllActionLists = \"http://127.0.0.1:5000/api/get-action_lists\"\nconst postAdressActionList = \"http://127.0.0.1:5000/api/set_action_list\"\nconst fetchAdressContentActiveList = \"http://127.0.0.1:5000/api/get_action_list_content\"\nconst postAdressAppendAction = \"http://127.0.0.1:5000/api/append_action\"\nconst postAdressDeleteAction = \"http://127.0.0.1:5000/api/delete_action\"\nconst postAdressSwapActions = \"http://127.0.0.1:5000/api/swap_action\"\nconst postAdressCreateActionList = \"http://127.0.0.1:5000/api/create_action_list\"\nconst postAdressExecuteList = \"http://127.0.0.1:5000/api/executeList\"\nconst postAdressCoordinateType = \"http://127.0.0.1:5000/api/set_coordinate_type\"\nconst fetchAdressPositionList = \"http://127.0.0.1:5000/api/get_coordinates\"\nconst fetchAdressMapping = \"http://127.0.0.1:5000/api/get_mapping_table\"\nconst postAdressMapping = \"http://127.0.0.1:5000/api/set_mapping_in_table\"\nconst postAdressMappingPosition= \"http://127.0.0.1:5000/api/set_mapping_pos\"\nconst postAdressButtonIndex= \"http://127.0.0.1:5000/api/set_button_index\"\nconst fetchAdressALBContent = \"http://127.0.0.1:5000/api/get_action_list_button_content\"\nconst fetchAdressCoordinates = \"http://127.0.0.1:5000/api/get_coordinates\"\n\n/**gets a list of dictionarrys containing a \"name\" of the action list and a \"key\"\n * specifieing if sequential or parallel\n * \n * @param setLists \n */\nexport async function GetActionListNames(setLists){ // returns string list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setLists, fetched, setfetched, fetchAdressAllActionLists)\n\n\n}\n/**\n *  fetches an array of dictionarrys each containing all data nessesary if key != action_list\n *  otherwise containig just the name of the underling actionList and information if it is a paralell od sequential list\n * @param setContent the method to set with the fetched data\n */\n\nexport async function GetActionListContent(setContent){ // returns string list\n    var [fetched, setfetched] = useState(false)                                     \n    passDataDirect(setContent, fetched, setfetched, fetchAdressContentActiveList)\n\n\n}\n\n/** action is a dictionarry containing the key which action to append, and all nessesary arguments for that action\n */\nexport async function appendAction( errorfunction, action, setErrorMessage){\n    var toPost =  action\n    toPost.set(\"marker\", \"append_action\")\n    const result = Object.fromEntries(toPost)\n    var reload = false\n   \n    await post2(result, postAdressAppendAction).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n\n/** informs the backend that the actionlist with the given name was chosen\n * and gets its content\n * \n * @param setContent \n * @param name \n */\nexport async function SetActionList( errorfunction, action, setErrorMessage){\n    console.log(action)\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"set_action_list\")\n    toPost.set(\"name\", action)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressActionList).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n/** delets the action in the currently changed list at the given position\n * and gets the changed list\n * \n * @param setContent \n * @param position \n */\nexport async function DeleteAction( errorfunction,position, setErrorMessage){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"delete_action\")\n    toPost.set(\"position\", position)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressDeleteAction).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n           errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** swaps the actions at the two specified positions and gets the modified list\n * \n * @param setContent \n * @param first position as int\n * @param second \n */\nexport async function SwapActions(first, second,  errorfunction,setErrorMessage){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"swap\")\n    toPost.set(\"first\", first)\n    toPost.set(\"second\", second)\n    const result = Object.fromEntries(toPost)\n    var reload = false\n    await post(result, postAdressSwapActions).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n/** creates a new action listwith given name and given type(\"sequential_list\" or\"parallel_list\")\n *  and gets the content of the new list\n * @param setContent \n * @param name \n * @param type \n */\nexport async function CreatetActionList(name:String, type:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"create_action_list\")\n    message.set(\"name\", name)\n    message.set(\"key\", type)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCreateActionList).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n/** executes the action list with the given name\n * \n * @param name \n */\nexport async function ExecuteActionList(name:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"execute_action_list\")\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressExecuteList).then(res => {\n        if(res !== \"Done\") {\n            console.log(res)\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** sets the type the coordinates are handeled ans displaied in ton the specified type(\"cartesian\",\"joint\")\n * \n * @param type \n */\nexport async function SetCoordinateType(type:String,  errorfunction,setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"set_coordinate_type\")\n    message.set(\"type\", type)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCoordinateType).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n/** gets all available positions as dict with (\"name\", and the coordinate \"coordinate\")\n * \n * @param setPositions \n */\nexport async function GetPositions(setPositions){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setPositions, fetched, setfetched, fetchAdressPositionList)\n\n\n}\n\n/** todo matching naming\n * \n * @param setMapping \n */\nexport async function GetMapping(setMapping){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    await passDataForActionMapping(setMapping, fetched, setfetched, fetchAdressMapping)\n}\n\n\n\n\nexport async function SetMappingPos(pos:[],  errorfunction,setErrorMessage){\n    var reload = false\n    await post(pos, postAdressMappingPosition).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\nexport async function SetMapping(mappingRobots,  errorfunction,setErrorMessage){\n    mappingRobots = convertFrontToBackMapping(mappingRobots)\n    var message = Array()\n    for (var x = 0; x<mappingRobots.length; x++) {\n        const temp = Object.fromEntries(mappingRobots[x])\n        message.push(temp)\n\n    }\n    var reload = false\n    await post(message, postAdressMapping).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n\nexport async function SetButtonIndex(index,  errorfunction,setErrorMessage){\n    var reload = false\n    console.log(\"idex\", index)\n    await post(index, postAdressButtonIndex).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            errorfunction()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n\n}\n\n\n\nexport { convertBackToFrontMapping }\n\nexport async function GetALButtonContentLen(setButton) {\n    var [fetched, setfetched] = useState(false) \n    await passDatalenght(setButton, fetched, setfetched, fetchAdressALBContent)\n}\n\nexport async function GetALButtonContent(setButton) {\n    var [fetched, setfetched] = useState(false) \n    await passDataDirect(setButton, fetched, setfetched, fetchAdressALBContent)\n}\n\n\n\nexport async function GetCoordinates(setCoordinates){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    await passDataCoordinates(setCoordinates, fetched, setfetched, fetchAdressCoordinates)\n}\n\n\n","/home/sihi/irei-frontend/src/PopUp/ErrorPopUP.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/BasicOpperations.tsx",["266","267","268","269","270","271","272","273","274","275","276"],[],"import React from \"react\"\n\n\nexport async function passDataDirect(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"data\", data)\n            set(data)\n        }\n        )\n}\n\nexport async function passDataAsMap(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            var dir = new Map(Object.entries(data))\n            set(dir)\n        }\n        )\n}\n\n\nexport async function post (content, postAdress){\n\n    const response = await fetch(postAdress, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(content)\n    })\n   \n    return (await response.text()).toString()\n\n}  \n\n\nexport async function post2 (content, postAdress){\n    console.log(\"COntent\", content)\n    console.log( JSON.stringify(content))\n    console.log(\"ADTRESS\", postAdress)\n        console.log(\"ves\")\n\n    var response = await fetch(postAdress, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(content)\n    })\n    response = await response\n    return await (await (await response.text()).toString())\n\n}  \n\n\n\nexport async function passDataForActionMapping(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(data)\n            set(convertBackToFrontMapping(data))\n        }\n        )\n}\n\n\n\nexport function convertFrontToBackMapping(frontMapping) {\n    var list = Array()\n    for (var x = 0; x< frontMapping.length; x++) {\n        var elem = frontMapping[x]\n        var temp = new Map() \n        var name = elem.get(\"name\")\n        temp.set(name.split(\".\")[0], elem.get(\"robot\"))\n        list.push(temp)\n    }\n    return list\n\n}\n\nexport function convertBackToFrontMapping(backMapping) {\n    var list = Array()\n   \n    var totalMap = new Map(Object.entries(backMapping))\n    for (let key of totalMap.keys()) {\n        var elem = new Map()\n        elem.set(\"name\", key + \". robot in this list\")\n        elem.set(\"robot\", totalMap.get(key))\n        list.push(elem)\n    } \n    return list\n\n}\n\nexport async function passDatalenght(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"data\", data)\n            set(data.length)\n        }\n        )\n}\n\n\nexport async function passDataCoordinates(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            console.log(\"dataCoord\", data)\n            var toReturn = new Array()\n            for(var elem of data) {\n                console.log(elem)\n                toReturn.push(new Map(Object.entries(elem)))\n            }\n            console.log(\"return\", toReturn)\n            set(toReturn)\n        }\n        )\n}\n\n\n\nexport async function passDataMatches(set,reference, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n           if(data == reference){\n            set(true)\n           }else {\n            set(false)\n           }\n        }\n        )\n}","/home/sihi/irei-frontend/src/PopUp/PopUp.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/SetRobots.tsx",["277","278"],[],"import React from \"react\"\nimport { post } from \"./BasicOpperations\"\n\nconst postAdressExpRobots = \"http://127.0.0.1:5000/api/setRobotsExp\"\nconst postAdressChangeGripperRobots= \"http://127.0.0.1:5000/api/setRobotsGripper\"\nconst postAdressSavePositionRobots = \"http://127.0.0.1:5000/api/setSavePosition\"\n\n\n\nexport async function SetExpRobots(action, robots, setErrorMessage){\n    var ipList = [\"\"]\n    for(var key of robots.keys()){\n      ipList.push(key)\n    }\n    var message =  new Map()\n    message.set(\"marker\", \"SetExpRobots\")\n    message.set(\"robot_ips\", ipList)\n    var reload = false\n    const result = Object.fromEntries(message)\n    await post(result, postAdressExpRobots).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n            console.log(1)\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n  }\nexport async function SetChangeGripperRobots(action, robots, setErrorMessage){\n  var ipList = [\"\"]\n    for(var key of robots.keys()){\n      ipList.push(key)\n    }\n    var message =  new Map()\n    message.set(\"marker\", \"SetChangeGripperRobots\")\n    message.set(\"robot_ips\", ipList)\n    var reload = false\n    const result = Object.fromEntries(message)\n    await post(result, postAdressChangeGripperRobots).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n            console.log(1)\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\nexport async function SetSavePositionRobot(action, robots, setErrorMessage){\n  var ipList = Array()\n  \n      ipList.push(robots)\n    \n    \n    var message =  new Map()\n    message.set(\"marker\", \"SetSavePositionRobots\")\n    message.set(\"robot_ip\", ipList)\n    var reload = false\n    const result = Object.fromEntries(message)\n    await post(result, postAdressSavePositionRobots).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n            console.log(1)\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n\n\n","/home/sihi/irei-frontend/src/backendComunication/FetchAndSetDirExp.tsx",["279"],[],"import React from \"react\"\nimport { useState } from \"react\"\nimport { post, passDataAsMap, passDataDirect, passDataMatches } from \"./BasicOpperations\"\nconst fetchAdressGetExperiments = \"http://127.0.0.1:5000/api/getRegExp\"\nconst postAdressChosenExperiment = \"http://127.0.0.1:5000/api/setup_exp\"\nconst fetchAdressGetDirectories = \"http://127.0.0.1:5000/api/get_content\"\nconst postAdressNavigateUP = \"http://127.0.0.1:5000/api/navigate_up\"\nconst postAdressNavigateDown = \"http://127.0.0.1:5000/api/navigate_down\"\nconst postAdressCreateDirectory = \"http://127.0.0.1:5000/api/create_dirctory\"\nconst postAdressDeleteDirectory = \"http://127.0.0.1:5000/api/delete_dirctory\"\nconst postAdressConfirmDirChoisey = \"http://127.0.0.1:5000/api/confirm_dir_coise\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_dir\"\nconst fetchAdressPath = \"http://127.0.0.1:5000/api/file_name\"\nconst fetchAdressTop = \"http://127.0.0.1:5000/api/is_top\"\n\n// contains dummy\n\n/** gets names of all registered experiments as array\n * \n */\nexport async function GetExperiments(setExperiments){\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setExperiments, fetched, setfetched, fetchAdressGetExperiments)\n\n\n}\n\nexport async function SetExperiment(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", \"SetExperiment\")\n    message.set(\"experiment\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressChosenExperiment).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\n// contains dummy\n\n/** gets a dictionary with two entrys\n * \"to_navigate\" all child experiments\n * \"cant_navigate\" all other files in directory\n * @param setDirectories \n */\nexport async function GetDirectories(setDirectories){\n    var [fetched, setfetched] = useState(false) \n   passDataAsMap(setDirectories, fetched, setfetched, fetchAdressGetDirectories)\n    \n\n    \n}\n\nexport async function GetPath(setPath){\n    var [fetched, setfetched] = useState(false) \n   passDataDirect(setPath, fetched, setfetched, fetchAdressPath)\n    \n\n    \n}\n\n\nconst markerNavUP = \"navigate_up\"\nexport async function NavigateUP(action,setErrorMessage){\n    var message =  new Map()\n    var reload = false\n    message.set(\"marker\", markerNavUP)\n    const result = Object.fromEntries(message)\n    await post(result, postAdressNavigateUP).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        } else {\n\n       reload = true}\n    })\n\n    return reload\n\n\n}\nconst markerNavDown = \"navigate_down\"\nexport async function NavigateDown(action, name, setErrorMessage){\n    var message =  new Map()\n   \n    message.set(\"marker\", markerNavDown)\n    message.set(\"dir\", name)\n     var reload = false\n    const result = Object.fromEntries(message)\n    await post(result, postAdressNavigateDown).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nconst markerCreate = \"create\"\nexport async function Create(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", markerCreate)\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressCreateDirectory).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\nconst markerDeleteDirectory = \"delete_directory\"\nexport async function DeleteDirectory(action, name, setErrorMessage){\n    var message =  new Map()\n    message.set(\"marker\", markerDeleteDirectory)\n    message.set(\"name\", name)\n    const result = Object.fromEntries(message)\n    var reload = false\n    await post(result, postAdressDeleteDirectory).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nexport function BaseNameDir(setName) {\n    var [fetched, setFetched] = useState(false) \n    passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}\n\nconst confirmMarker = \"confirm_dir_coise\"\nexport async function confirmDirChoise(action,setErrorMessage) {\n    var reload = false\n    await post(confirmMarker, postAdressConfirmDirChoisey).then(res => {\n        if(res !== \"Done\") {\n            setErrorMessage(res)\n            action()\n           reload = false\n        }\n      else {\n       reload = true\n      }\n    })\n\n    return reload\n\n}\n\nexport async function IsTop(setTop) {\n    var [fetched, setFetched] = useState(false) \n    var reference = \"true\"\n   await passDataMatches(setTop, reference, fetched, setFetched, fetchAdressTop)\n}\n\n\n","/home/sihi/irei-frontend/src/choosePages/ChooseRobotButton.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx",[],[],"/home/sihi/irei-frontend/src/backendComunication/FetchAndSetLab.tsx",["280","281"],[],"import React from \"react\"\nimport { post } from \"./BasicOpperations\";\n\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n \n \n /**informs the backend which lab was chosen\n     * \n     * @param labName  name of the chosen lab\n     */\n export async function informLabChoise (action, labName, setErrorMessage){\n  var message =  new Map()\n  message.set(\"marker\", \"setCurrentLab\")\n  message.set(\"name\", labName)\n  var reload = false\n  const result = Object.fromEntries(message)\n  await post(result, postAdressLab).then(res => {\n      if(res !== \"Done\") {\n          setErrorMessage(res)\n          action()\n          console.log(1)\n         reload = false\n      }\n    else {\n     reload = true\n    }\n  })\n\n  return reload\n\n    \n  }\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched){\n  \n    if(fetched) {\n      return\n    }\n     setfetched (true)\n      const data = await (\n        await fetch(\n          fetchAdress\n        )\n      ).json().then(data => {\n        var labs = new Map()\n        for(let i = 0; i < data.length; i++) {\n            var robots = new Map()\n            for(let j = 0; j < data[i].robots.length; j++) {\n              robots.set(data[i].robots[j].ip, data[i].robots[j].name)\n            }\n          labs.set(data[i].name, robots)\n        }\n        setLabs(labs)\n      }\n      )\n     \n          // set state when the data received\n  }","/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx",["282"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { informLabChoise } from '../../backendComunication/FetchAndSetLab';\nimport '../Choose.css';\nimport './../../theme.css'\nimport './../../irei_styles.css'\n\n/**\n * The ChooseLaboratoryButton is used to choose \n * the Laboratory which is displayed from this Button\n */\nexport default function ChooseLaboratoryButton (props) {\n\n    const clicked = () => {\n        props.action(props.name)\n    }\n  \n    const roboter = (props.buttons(props.name))\n   //   const [robots, setRobots] = useState(props.buttons(props.name))\n\n    return ( \n        <Link\n           to = {\"/ChooseExperimentRobots\"}\n           state = {{from: roboter}}\n        >\n        <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n         onClick={clicked}>\n            {props.name}\n        </button>\n        </Link>\n     );\n}","/home/sihi/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotsForMapping.tsx",["283"],[],"import React, { useState } from 'react'\nimport { Link, } from 'react-router-dom';\nimport { GetExpRobots } from '../../backendComunication/FetchRobots';\nimport '../../irei_styles.css'\n\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseRobotsForMappingPage(props){\n\n    var [robots, setRobots] = useState(new Map());\n\n    GetExpRobots(setRobots)\n    //GetExpRobots(setRobots)\n\n    const arrRobots = Array.from(robots, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n    const handleClick = (ip) => {\n        props.execute( ip)\n    }\n\n    const buttons = arrRobots.map((number) => {\n      return <div>\n        <RobotButton key={number.key}\n      data_key= {number.key} \n      name= {number.value} \n      execute = {handleClick}/>\n      </div>\n    })\n\n    return (\n      <div>\n        {buttons}\n      </div>\n    )\n}\n\n/**\n * The RobotButton is used to choose \n * the Robot which is displayed from this Button\n */\nfunction RobotButton (props) {\n\n  return (   // noch zurückschicken wenn Gripper\n  <button onClick = {() => props.execute(props.data_key)}\n  className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n    <div>{props.data_key} {props.name}</div>\n  </button>\n   );\n}\n\n/*\nconst help = new Map();\nhelp.set(\"123.123.234\", \"julie\")\nhelp.set(\"673.986.638\", \"maja\")\nhelp.set(\"894.234.467\", \"dominik\")\nhelp.set(\"235.474.458\", \"niclas\")\nhelp.set(\"777.345.658\", \"jule\")\nhelp.set(\"346.346.476\", \"andre\")*/","/home/sihi/irei-frontend/src/NavigationButton.tsx",[],[],"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegistered.tsx",["284"],[],"import React from 'react'\nimport {useState} from 'react'\nimport { Link, useNavigate } from 'react-router-dom';\nimport { GetExperiments, SetExperiment } from '../../backendComunication/FetchAndSetDirExp';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport TopBar from '../../TopBar';\nimport '../Choose.css';\nimport './../../theme.css'\nimport './../../irei_styles.css'\n\n/**\n * The ChooseExperimentRegister is used to choose \n * the experiment class the user wants to execute\n */\nexport default function ChooseExperimentRegistered() {\n    const navigate = useNavigate();\n    const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\")\n    const [error, setError] = useState(false)\n    const [exp, setExperiment] = useState([]);\n    GetExperiments(setExperiment);\n\n    const errorState = () => {\n        setError(current => !current)\n       }\n       const setExp = (name) => {\n            SetExperiment(errorState,name, setErrorMessage ).then(res => {\n                if(res) {\n                    navigate(\"/Controlpage\")\n                }\n            }\n            )\n       }\n\n\n    const buttons = exp.map((number) => {\n        return <ChooseRegisterButton name={number} action= {setExp}/>\n    })\n\n    return (\n        <div>\n            <TopBar title=\"Choose Experiment\"></TopBar>\n            <div className='choose-flexbox'>\n            {buttons}\n            </div>\n            <ErrorPopUp active={error} deactivate={errorState} message={errorMessage}/>\n        </div>\n    )\n}\n\n/**\n * The ChooseRegisterButton is used to choose \n * the Esperiment out of the register which is displayed by this Button\n */\n\nfunction ChooseRegisterButton (props) {\n    const setChoise = () => {\n        props.action(props.name) \n    }\n    return ( \n       \n        <button onClick={setChoise} \n        className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n            {props.name}\n        </button>\n    \n     );\n}\n\n/*\nfunction SaveChoice () {\n    //sent to Backend\n}\n*/",{"ruleId":"285","severity":1,"message":"286","line":14,"column":12,"nodeType":"287","messageId":"288","endLine":14,"endColumn":24},{"ruleId":"285","severity":1,"message":"289","line":15,"column":12,"nodeType":"287","messageId":"288","endLine":15,"endColumn":17},{"ruleId":"285","severity":1,"message":"290","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":14},{"ruleId":"285","severity":1,"message":"286","line":16,"column":12,"nodeType":"287","messageId":"288","endLine":16,"endColumn":24},{"ruleId":"285","severity":1,"message":"289","line":17,"column":12,"nodeType":"287","messageId":"288","endLine":17,"endColumn":17},{"ruleId":"285","severity":1,"message":"286","line":16,"column":10,"nodeType":"287","messageId":"288","endLine":16,"endColumn":22},{"ruleId":"285","severity":1,"message":"289","line":17,"column":10,"nodeType":"287","messageId":"288","endLine":17,"endColumn":15},{"ruleId":"285","severity":1,"message":"290","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":14},{"ruleId":"285","severity":1,"message":"286","line":9,"column":12,"nodeType":"287","messageId":"288","endLine":9,"endColumn":24},{"ruleId":"285","severity":1,"message":"289","line":10,"column":12,"nodeType":"287","messageId":"288","endLine":10,"endColumn":17},{"ruleId":"285","severity":1,"message":"290","line":3,"column":23,"nodeType":"287","messageId":"288","endLine":3,"endColumn":27},{"ruleId":"285","severity":1,"message":"286","line":11,"column":12,"nodeType":"287","messageId":"288","endLine":11,"endColumn":24},{"ruleId":"285","severity":1,"message":"289","line":12,"column":12,"nodeType":"287","messageId":"288","endLine":12,"endColumn":17},{"ruleId":"285","severity":1,"message":"291","line":46,"column":11,"nodeType":"287","messageId":"288","endLine":46,"endColumn":20},{"ruleId":"285","severity":1,"message":"290","line":2,"column":10,"nodeType":"287","messageId":"288","endLine":2,"endColumn":14},{"ruleId":"285","severity":1,"message":"292","line":2,"column":16,"nodeType":"287","messageId":"288","endLine":2,"endColumn":27},{"ruleId":"285","severity":1,"message":"286","line":13,"column":10,"nodeType":"287","messageId":"288","endLine":13,"endColumn":22},{"ruleId":"285","severity":1,"message":"289","line":14,"column":10,"nodeType":"287","messageId":"288","endLine":14,"endColumn":15},{"ruleId":"285","severity":1,"message":"293","line":6,"column":60,"nodeType":"287","messageId":"288","endLine":6,"endColumn":75},{"ruleId":"285","severity":1,"message":"294","line":8,"column":7,"nodeType":"287","messageId":"288","endLine":8,"endColumn":18},{"ruleId":"285","severity":1,"message":"295","line":15,"column":9,"nodeType":"287","messageId":"288","endLine":15,"endColumn":17},{"ruleId":"285","severity":1,"message":"290","line":6,"column":10,"nodeType":"287","messageId":"288","endLine":6,"endColumn":14},{"ruleId":"285","severity":1,"message":"296","line":8,"column":7,"nodeType":"287","messageId":"288","endLine":8,"endColumn":20},{"ruleId":"285","severity":1,"message":"297","line":43,"column":12,"nodeType":"287","messageId":"288","endLine":43,"endColumn":23},{"ruleId":"298","severity":1,"message":"299","line":54,"column":25,"nodeType":"300","messageId":"301","endLine":54,"endColumn":27},{"ruleId":"285","severity":1,"message":"302","line":3,"column":8,"nodeType":"287","messageId":"288","endLine":3,"endColumn":13},{"ruleId":"285","severity":1,"message":"303","line":5,"column":10,"nodeType":"287","messageId":"288","endLine":5,"endColumn":25},{"ruleId":"285","severity":1,"message":"304","line":52,"column":17,"nodeType":"287","messageId":"288","endLine":52,"endColumn":21},{"ruleId":"285","severity":1,"message":"302","line":1,"column":8,"nodeType":"287","messageId":"288","endLine":1,"endColumn":13},{"ruleId":"285","severity":1,"message":"305","line":3,"column":32,"nodeType":"287","messageId":"288","endLine":3,"endColumn":45},{"ruleId":"306","severity":1,"message":"307","line":276,"column":19,"nodeType":"308","messageId":"309","endLine":276,"endColumn":26,"fix":"310"},{"ruleId":"285","severity":1,"message":"302","line":1,"column":8,"nodeType":"287","messageId":"288","endLine":1,"endColumn":13},{"ruleId":"285","severity":1,"message":"304","line":10,"column":15,"nodeType":"287","messageId":"288","endLine":10,"endColumn":19},{"ruleId":"285","severity":1,"message":"304","line":27,"column":15,"nodeType":"287","messageId":"288","endLine":27,"endColumn":19},{"ruleId":"285","severity":1,"message":"304","line":80,"column":15,"nodeType":"287","messageId":"288","endLine":80,"endColumn":19},{"ruleId":"306","severity":1,"message":"307","line":94,"column":16,"nodeType":"308","messageId":"309","endLine":94,"endColumn":23,"fix":"311"},{"ruleId":"306","severity":1,"message":"307","line":107,"column":16,"nodeType":"308","messageId":"309","endLine":107,"endColumn":23,"fix":"312"},{"ruleId":"285","severity":1,"message":"304","line":126,"column":15,"nodeType":"287","messageId":"288","endLine":126,"endColumn":19},{"ruleId":"285","severity":1,"message":"304","line":144,"column":15,"nodeType":"287","messageId":"288","endLine":144,"endColumn":19},{"ruleId":"306","severity":1,"message":"307","line":150,"column":28,"nodeType":"313","messageId":"309","endLine":150,"endColumn":39,"fix":"314"},{"ruleId":"285","severity":1,"message":"304","line":169,"column":15,"nodeType":"287","messageId":"288","endLine":169,"endColumn":19},{"ruleId":"298","severity":1,"message":"299","line":174,"column":20,"nodeType":"300","messageId":"301","endLine":174,"endColumn":22},{"ruleId":"285","severity":1,"message":"302","line":1,"column":8,"nodeType":"287","messageId":"288","endLine":1,"endColumn":13},{"ruleId":"306","severity":1,"message":"307","line":61,"column":16,"nodeType":"308","messageId":"309","endLine":61,"endColumn":23,"fix":"315"},{"ruleId":"285","severity":1,"message":"302","line":1,"column":8,"nodeType":"287","messageId":"288","endLine":1,"endColumn":13},{"ruleId":"285","severity":1,"message":"302","line":1,"column":8,"nodeType":"287","messageId":"288","endLine":1,"endColumn":13},{"ruleId":"285","severity":1,"message":"304","line":47,"column":13,"nodeType":"287","messageId":"288","endLine":47,"endColumn":17},{"ruleId":"285","severity":1,"message":"303","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":25},{"ruleId":"285","severity":1,"message":"290","line":2,"column":10,"nodeType":"287","messageId":"288","endLine":2,"endColumn":14},{"ruleId":"285","severity":1,"message":"290","line":3,"column":10,"nodeType":"287","messageId":"288","endLine":3,"endColumn":14},"@typescript-eslint/no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'Link' is defined but never used.","'chooseAll' is assigned a value but never used.","'useLocation' is defined but never used.","'DeleteDirectory' is defined but never used.","'fetchAdress' is assigned a value but never used.","'navigate' is assigned a value but never used.","'successMarker' is assigned a value but never used.","'stopLogging' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'React' is defined but never used.","'informLabChoise' is defined but never used.","'data' is assigned a value but never used.","'passDataAsMap' is defined but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","CallExpression","useLiteral",{"range":"316","text":"317"},{"range":"318","text":"317"},{"range":"319","text":"317"},"NewExpression",{"range":"320","text":"317"},{"range":"321","text":"317"},[8188,8195],"[]",[1963,1970],[2301,2308],[3276,3287],[1642,1649]]