[{"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/index.tsx":"1","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ControlPage.tsx":"2","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx":"3","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLanguagePage/ChooseLanguagePage.tsx":"4","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseNamePage/ChooseNamePage.tsx":"5","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseVariablePage/ChooseVariablePage.tsx":"6","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx":"7","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotPage.tsx":"8","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegister.tsx":"9","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx":"10","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx":"11","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/TopBar.tsx":"12","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/LoggerButton.tsx":"13","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ModeButton.tsx":"14","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/EmergencyExit.tsx":"15","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/SavePositionButton.tsx":"16","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/GripperButton.tsx":"17","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ResetButton.tsx":"18","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/ChoosePage.tsx":"19","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/NamingPopUp.tsx":"20","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ErrorPopUP.tsx":"21","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx":"22","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/Other FetchAndSet.tsx":"23","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/PopUp.tsx":"24","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/ChooseRobotButton.tsx":"25","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx":"26","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx":"27","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/NavigationButton.tsx":"28"},{"size":2176,"mtime":1676015839709,"results":"29","hashOfConfig":"30"},{"size":2453,"mtime":1676015839705,"results":"31","hashOfConfig":"30"},{"size":1631,"mtime":1676015839704,"results":"32","hashOfConfig":"30"},{"size":411,"mtime":1675762729827,"results":"33","hashOfConfig":"30"},{"size":343,"mtime":1675762729827,"results":"34","hashOfConfig":"30"},{"size":365,"mtime":1675762729828,"results":"35","hashOfConfig":"30"},{"size":2471,"mtime":1676015839701,"results":"36","hashOfConfig":"30"},{"size":1138,"mtime":1676015839703,"results":"37","hashOfConfig":"30"},{"size":1337,"mtime":1676015839702,"results":"38","hashOfConfig":"30"},{"size":1547,"mtime":1676015839702,"results":"39","hashOfConfig":"30"},{"size":2173,"mtime":1676015839703,"results":"40","hashOfConfig":"30"},{"size":2499,"mtime":1676020449529,"results":"41","hashOfConfig":"30"},{"size":2414,"mtime":1676015839707,"results":"42","hashOfConfig":"30"},{"size":1119,"mtime":1676015839708,"results":"43","hashOfConfig":"30"},{"size":703,"mtime":1676015839706,"results":"44","hashOfConfig":"30"},{"size":1204,"mtime":1676015839708,"results":"45","hashOfConfig":"30"},{"size":785,"mtime":1676015839707,"results":"46","hashOfConfig":"30"},{"size":737,"mtime":1676015839708,"results":"47","hashOfConfig":"30"},{"size":191,"mtime":1675762729824,"results":"48","hashOfConfig":"30"},{"size":1292,"mtime":1676015839708,"results":"49","hashOfConfig":"30"},{"size":665,"mtime":1676015839706,"results":"50","hashOfConfig":"30"},{"size":1221,"mtime":1676015839704,"results":"51","hashOfConfig":"30"},{"size":3300,"mtime":1676015839701,"results":"52","hashOfConfig":"30"},{"size":275,"mtime":1676015839701,"results":"53","hashOfConfig":"30"},{"size":900,"mtime":1676015839700,"results":"54","hashOfConfig":"30"},{"size":466,"mtime":1676015839702,"results":"55","hashOfConfig":"30"},{"size":684,"mtime":1676015839702,"results":"56","hashOfConfig":"30"},{"size":516,"mtime":1676020664745,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"jw2dzj",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"61"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"61"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"61"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"61"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"61"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/index.tsx",[],[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ControlPage.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ActionPage/ActionListPage.tsx",["157"],[],"import React from 'react';\nimport {useState} from 'react';\nimport TopBar from '../../TopBar';\nimport ActionlistButton from './ActionlistButton';\n\n/**\n * The ActionListPage is used to edit a list of actions by adding new action and deleting others\n */\nexport default function ActionListPage (props) {\n    \n\n    //const [actionlist, setActionlist] = useState(new Map<string, []>());\n    //über Fetch set ActionList\n    const [actionlist, setActionlist] = useState( CreaateArray());\n\n    const array = Array.from(actionlist, function(entry) {\n        return { key: entry[0], value: entry[1]}\n    })\n\n    return ( \n        <div>\n            <TopBar title=\"Actionlist\"></TopBar>\n            {\n                array.map((number) => {\n                    return <div>\n                        <ActionlistButton key={number.key} \n                        name={number.value[0]} \n                        second={number.value[1]}\n                         kind={number.value[2]} />\n                    </div>\n                })\n            }\n        </div>\n     );\n}\n\nconst CreaateArray = () => { // Müll zum testen\n\n    var happines = new Map()\n    happines.set(\"7\", [\"steering\", \"Niclas\", \"a\"])\n    happines.set(\"8\", [\"steering\", \"dominik\", \"a\"])\n    happines.set(\"9\", [\"steering\", \"rudolf\", \"a\"])\n\n    var maood = new Map()\n    maood.set(\"1\", [\"gripper\", \"Niclas\", \"action\"])\n    maood.set(\"2\", [\"gripper\", \"dominik\", \"a\"])\n    maood.set(\"3\", [\"gripper\", \"rudolf\", \"a\"])\n    maood.set(\"4\", [\"listeeee\", happines, \"l\"])\n    maood.set(\"5\", [\"gripper\", \"tessa\", \"a\"])\n    maood.set(\"6\", [\"gripper\", \"julie\", \"a\"])\n\n    \n\n    return maood;\n}\n ","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLanguagePage/ChooseLanguagePage.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseNamePage/ChooseNamePage.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseVariablePage/ChooseVariablePage.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseDirectoryPage/ChooseDirectoryPage.tsx",["158"],[],"import React from 'react'\nimport {useState} from 'react'\nimport TopBar from '../../TopBar';\nimport DirectoryButton from './DirectoryButton';\nimport { GetDirectories, NavigateDown, NavigateUP } from '../Other FetchAndSet';\nimport { Link } from 'react-router-dom';\nimport PopUp from '../PopUp'\n\n/**\n * The ChooseDirectoryPage is used to navigate in a Datastructure\n * and choose a directory\n */\nexport default function ChooseDirectoryPage () {\n    const [directories, setDirectories] = useState(new Map<String,[]>());\n    GetDirectories(setDirectories);\n\n    const navUp = () => {\n        NavigateUP();\n        window.location.reload()\n    }\n\n    const navDown = (folder) => {\n        NavigateDown( folder);\n        window.location.reload()\n    }\n    \n    var [popUpName, setPopUpName] = useState(false);\n    const [name, setName] = useState(\"\")\n\n    return ( \n        <div>\n            <TopBar title=\"Choose Directory\"></TopBar>\n            <div>\n                {\n                    directories.get(\"to_navigate\")?.map((number) => {\n                    return <DirectoryButton name={number} action={navDown}/>\n                    })\n                }\n            </div>\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            onClick = {navUp}>navigate up</button>\n            <Link to = {\"/ControlPage\"}>\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            >confirm</button>\n            </Link>\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            onClick = {()=> setPopUpName(true)}>create</button>\n            \n        <PopUp trigger={popUpName}>\n            <form>\n                <div>\n                    <label>name the folder:</label>\n                </div>\n                <div>\n                    <input\n                    type=\"text\"\n                    required\n                    value= {name}\n                    onChange = {(e) => setName(e.target.value)}\n                    />\n                </div>\n            </form>\n            {(name != \"\")? \n            <Link to = {\"/ChooseLaboratoryPage\"}>\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n            >confirm</button>\n            </Link> : <></>\n            }\n        </PopUp>\n        </div>\n     );\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseRobotPage/ChooseRobotPage.tsx",["159"],[],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { useLocation } from \"react-router-dom\";\n\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseRobotPage(props){\n\n  const location = useLocation();\n  const { kind } = location.state;\n\n    var [robots, setRobots] = useState(new Map<string, string>());\n    props.fetch(setRobots)\n\n    const arrRobots = Array.from(robots, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n    const buttons = arrRobots.map((number) => {\n      return <RobotButton key={number.key} name= {number.value} action={kind}/>\n    })\n\n    return (<></>)\n}\n\n\n/**\n * The RobotButton is used to choose \n * the Robot which is displayed from this Button\n */\nfunction RobotButton (props) {\n\n  return ( \n      <Link\n         to = {\"/ChooseExperimentRobots\"}\n         state = {{ip: props.key, kind: props.action}}\n      >\n      <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n          {props.name}\n      </button>\n      </Link>\n   );\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRegister.tsx",["160"],[],"import React from 'react'\nimport {useState} from 'react'\nimport { Link } from 'react-router-dom';\nimport { GetExperiments } from '../Other FetchAndSet';\nimport TopBar from '../../TopBar';\nimport '../Choose.css';\nimport { SetExperiment } from '../Other FetchAndSet';\n\n/**\n * The ChooseExperimentRegister is used to choose \n * the experiment class the user wants to execute\n */\nexport default function ChooseExperimentRegister() {\n\n    const [exp, setExperiment] = useState([]);\n    GetExperiments(setExperiment);\n    const buttons = exp.map((number) => {\n        return <ChooseRegisterButton name={number} action= {SetExperiment}/>\n    })\n\n    return (\n        <div>\n            <TopBar title=\"Choose Experiment\"></TopBar>\n            {buttons}\n        </div>\n    )\n}\n\n/**\n * The ChooseRegisterButton is used to choose \n * the Esperiment out of the register which is displayed by this Button\n */\n\nfunction ChooseRegisterButton (props) {\n    const setChoise = () => {\n        props.action(props.name) \n    }\n    return ( \n        <Link\n           to = {\"/Controlpage\"}\n        >\n        <button onClick={setChoise} \n        className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\">\n            {props.name}\n        </button>\n        </Link>\n     );\n}\n\nfunction SaveChoice () {\n    //sent to Backend\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx",["161"],[],"import React from 'react'\nimport TopBar from '../../TopBar';\nimport ChooseButton from '../ChooseRobotButton';\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseExperimentRobots(){\n\n    const location = useLocation();\n    const { from } = location.state;\n\n    var chosen =  new Map<string, string>() // the chosen robots \n\n\n    const clickedBot = (ip, name) => {\n        if (chosen.has(ip))  {\n            chosen.delete(ip)\n        } else {\n            chosen.set(ip,name)\n        }\n        console.log(chosen)\n    }\n\n    const confirm = () => {\n        // to do sent map chosen back to the backend\n    }\n\n    const buttons = from.map((number) => { \n        return <ChooseButton name={number.value} \n        ip={number.key}\n        action = {clickedBot}\n        state = {false}/>\n    })\n\n\n    const chooseAll = () => { // toDo funktioniert noch nicht\n        for(var i = 0;i<from.length;i++) { \n           if (!chosen.has(from[i].key)) {\n            chosen.set(from[i].key,from[i].value)\n           }\n         }\n    }\n\n    return ( \n        <div>\n        <TopBar title=\"Choose Robots\"></TopBar>\n        {buttons}\n        <Link \n            to = {\"/ChooseExperimentRegister\"}\n        >\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n             onClick={confirm}>confirm</button>\n        </Link>\n        </div>\n    );\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx",["162"],[],"import React from 'react';\nimport { useState } from 'react';\nimport TopBar from '../../TopBar';\nimport ChooseLaboratoryButton from './ChooseLaboratoryButton';\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport default function ChooseLaboratoryPage() {\n\n    const [labs, setLabs] = useState(new Map<string, Map<string, string>>()); // key = labname, value = robot list\n    var [fetched, setfetched] = useState(false)\n    getLabs(setLabs, fetched, setfetched)\n    const arrLabs = Array.from(labs, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n    const robots = (key) => {\n     return Array.from(labs.get(key), function (entry) {\n      return { key: entry[0], value: entry[1]}})\n    }\n\n\n       return ( \n      <div>\n        <TopBar title=\"Choose Laboratory\"></TopBar>\n        {\n          arrLabs.map((number) => {\n            return <ChooseLaboratoryButton name={number.key} \n            buttons = {robots} />\n          })\n        }\n      </div>\n    );\n}\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nasync function getLabs(setLabs, fetched, setfetched){\n  \n  if(fetched) {\n    return\n  }\n   setfetched (true)\n    const data = await (\n      await fetch(\n        fetchAdress\n      )\n    ).json().then(data => {\n      var labs = new Map()\n      for(let i = 0; i < data.length; i++) {\n          var robots = new Map()\n          for(let j = 0; j < data[i].robots.length; j++) {\n            robots.set(data[i].robots[j].name, data[i].robots[j].ip)\n          }\n        labs.set(data[i].name, robots)\n      }\n      setLabs(labs)\n    }\n    )\n   \n        // set state when the data received\n}\n/**\n * //shema für labornamen \n    for (let key of labs.keys()) {\n      console.log(key) //laborname\n    }\n\n    // shema um roboter namen zu kriegen\n    for (let key of labs.keys()) {\n      if(typeof labs.get(key) != \"undefined\") {\n        for (let koy of labs.get(key).keys()) { // is catched one line above\n          console.log(koy); // roboternamen\n      }          \n      }\n\n    }\n */\n\n\n   ","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/TopBar.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/LoggerButton.tsx",["163","164"],[],"import React, { useState } from 'react';\nimport './Control.css';\nimport {post, passDataDirect} from \"../choosePages/Other FetchAndSet\"\nconst fetchAdressStop = \"http://127.0.0.1:5000/api/stop\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_stop\"\nconst stopMessage = \"stop\"\nconst fetchAdressStart = \"http://127.0.0.1:5000/api/start\"\nconst startMessage = \"start\"\nconst fetchAdressCancel = \"http://127.0.0.1:5000/api/cancel\"\nconst cancelMessage = \"cancel\"\n\n\nexport function postLoggingStop(errorfunction, name, setErrorMessage) {\n  var to_post = new Map()\n  to_post.set(\"marker\", stopMessage)\n  to_post.set(\"name\", name)\n  const result = Object.fromEntries(to_post)\n  post(result, fetchAdressStop).then(res => {\n    if(res != \"Done\") {\n        setErrorMessage(res)\n        errorfunction()\n    }\n  })\n}\n\nexport function BaseNameStop(setName) {\n  var [fetched, setFetched] = useState(false) \n  passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}\n\nexport default function LoggerButton (props) {\n\n  function stopLogging() {\n    props.action();\n  }\n\n\n  function startLogging() {\n    async function post (){\n       const response = await fetch(fetchAdressStart, {\n           'method': 'POST',\n           headers : {\n           'Content-Type': 'application/json'\n           },\n           body : JSON.stringify(startMessage)\n       })\n  \n       console.log(response)\n      \n   }\n   post()\n   props.action();\n  }\n\n  function cancelLogging() {\n    async function post (){\n       const response = await fetch(fetchAdressCancel, {\n           'method': 'POST',\n           headers : {\n           'Content-Type': 'application/json'\n           },\n           body : JSON.stringify(cancelMessage)\n       })\n      \n   }\n   post()\n   props.action();\n  }\n\n  const start = (\n    <div>\n        <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={startLogging}>Start</button>\n    </div>\n  )\n\n  const stop = (\n    <div>\n      <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n       onClick={() => {\n        props.stoped()\n        stopLogging()}}>Stop</button>\n      <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n       onClick={cancelLogging}>Abort</button>\n    </div>\n  )\n\n  return (\n    <>\n    {props.state ? stop : start}\n    </>\n  )\n};","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ModeButton.tsx",["165"],[],"import React, { useState } from \"react\";\nimport { post, passDataDirect} from \"../choosePages/Other FetchAndSet\";\nconst postAdress = \"http://127.0.0.1:5000/api/cycle_modes\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/get_mode\"\nconst cycleModeMassage = \"cycle_modes\"\n\n\nfunction GetMode(setMode) {\n    var [fetched, setFetched] = useState(false) \n    passDataDirect(setMode, fetched, setFetched, fetchAdress)\n\n\n\n    \n}\n\n\n/**\n * The ResetButton is used to reset a scene\n */\nfunction ModeButton (props) {\n    var [mode, setMode] = useState() \n    var [fetched, setFetched] = useState(false) \n    GetMode(setMode)\n    const test = () => {\n    post(cycleModeMassage, postAdress).then(res => {\n    if(res != \"Done\") {\n        props.errorMessage(res)\n        props.forErrors()\n        \n    }\n   }).then(res => {\n    passDataDirect(setMode, fetched, setFetched, fetchAdress)\n    .then(res => setFetched(false))\n    \n})\n}\n\n    return ( \n        <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={test\n        }>{mode}</button>\n     );\n}\n \nexport default ModeButton;","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/EmergencyExit.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/SavePositionButton.tsx",["166","167"],[],"import React, { useState } from 'react'\nimport {post, passDataDirect} from \"../choosePages/Other FetchAndSet\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/savePosition\"\nconst fetchAdressName = \"http://127.0.0.1:5000/api/get_base_name_save_position\"\nconst savePositionMassage = \"savePosition\"\nconst successMarker = \"Done\"\n\nexport function informSavePosition(action, name, setErrorMessage) {\n    var to_post = new Map()\n    to_post.set(\"marker\", savePositionMassage)\n    to_post.set(\"name\", name)\n    const result = Object.fromEntries(to_post)\n    post(result, fetchAdress).then(res => {\n            if(res != \"Done\") {\n                setErrorMessage(res)\n                action()\n            }\n    })\n}\n/**\n * The SavePositionButton is used to save a Position \n * for later use\n */\nfunction SavePositionButton (props) {\n    return ( \n        <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={props.action}>save position</button>\n     );\n}\n\n \nexport default SavePositionButton;\n\n\nexport function BaseNamePosition(setName) {\n    var [fetched, setFetched] = useState(false) \n    passDataDirect(setName, fetched, setFetched, fetchAdressName)\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/GripperButton.tsx",["168"],[],"import React from 'react'\nimport { post } from '../choosePages/Other FetchAndSet';\nconst fetchAdress = \"http://127.0.0.1:5000/api/execchangegripper\"\nconst Message = \"execchangegripper\"\n\nfunction informexecChangeGripper(errorMessage, forErrors) {\n    post(Message, fetchAdress).then(res=> {\n        if(res != \"Done\") {\n           errorMessage(res)\n           forErrors()\n            \n        }\n    })\n}\n\n/**\n * The GripperButton is used to control the Gripper auf chosen Robots\n */\nfunction GripperButton (props) {\n    return ( \n        <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n         onClick={()=> {informexecChangeGripper(props.errorMessage, props.forErrors)}}>gripper</button>\n     );\n}\n \nexport default GripperButton;","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ResetButton.tsx",["169"],[],"import React from \"react\";\nimport { post } from \"../choosePages/Other FetchAndSet\";\nimport \"./../Theme.css\"\n\nconst fetchAdress = \"http://127.0.0.1:5000/api/reset\"\nconst resetMessage = \"reset\"\n\n\n\nfunction informReset(errorMessage, forErrors) {\n    post(resetMessage, fetchAdress).then(res=> {\n        if(res != \"Done\") {\n           errorMessage(res)\n           forErrors()\n            \n        }\n    })\n}\n\n\n\n\n/**\n * The ResetButton is used to reset a scene\n */\nfunction ResetButton (props) {\n    return ( \n        <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" onClick={()=> {informReset(props.errorMessage, props.forErrors)}}>reset</button>\n     );\n}\n \nexport default ResetButton;","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/ChoosePage.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/NamingPopUp.tsx",["170"],[],"import React, { useState } from \"react\";\nimport PopUp from \"../choosePages/PopUp\";\n\n\n\nexport function NamingPopUp(props) {\n//active, confirm, forErrors, getBaseName\n    const [name, setName] = useState(\"\")\n    props.getBaseName(setName)\n    return (\n        <PopUp trigger={props.active}>\n                    <form>\n                        <div>\n                            <label>please enter a name or accept the default name:</label>\n                        </div>\n                        <div>\n                            <input\n                            type=\"text\"\n                            required\n                            value= {name}\n                            onChange = {(e) => setName(e.target.value)}\n                            />\n                        </div>\n                    </form>\n                    {(name != \"\")? \n                    <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" \n                    onClick={() => {props.confirm(props.forErrors, name, props.errorMessage)\n                    props.deactivate()\n                    }}\n                    >confirm</button>\n                    \n                    \n                    : <></>\n                }\n                </PopUp>\n        )\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ErrorPopUP.tsx",["171"],[],"import React, { useState } from \"react\";\nimport PopUp from \"../choosePages/PopUp\";\n\n\n\nexport function ErrorPopUp(props) {\n//active deactivate\n\n\n    return (\n        <PopUp trigger={props.active}>\n                    <form>\n                        <div>\n                            <label>{props.message}</label>\n                        </div>\n                       \n                    </form>\n                    <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n                     onClick={props.deactivate} \n                    >ok</button>\n                    : <></>\n                </PopUp>\n        )\n}","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/controlPages/ActionPage/ActionlistButton.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/Other FetchAndSet.tsx",["172","173"],[],"import { useState } from \"react\"\n\nconst fetchAdressGetExperiments = \"http://127.0.0.1:5000/api/getRegExp\"\nconst postAdressChosenExperiment = \"http://127.0.0.1:5000/api/setup_exp\"\nconst fetchAdressGetDirectories = \"http://127.0.0.1:5000/api/get_content\"\nconst postAdressNavigateUP = \"http://127.0.0.1:5000/api/navigate_up\"\nconst postAdressNavigateDown = \"http://127.0.0.1:5000/api/navigate_down\"\nconst postAdressCreateDirectory = \"http://127.0.0.1:5000/api/create_dirctory\"\nconst postAdressDeleteDirectory = \"http://127.0.0.1:5000/api/delete_dirctory\"\n\n// contains dummy\n\n/** gets names of all registered experiments as array\n * \n */\nexport async function GetExperiments(setExperiments){\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setExperiments, fetched, setfetched, fetchAdressGetExperiments)\n\n\n}\n\nexport async function SetExperiment(experiment){\n    var message =  new Map()\n    message.set(\"marker\", \"SetExperiment\")\n    message.set(\"experiment\", experiment)\n    const result = Object.fromEntries(message)\n    post(result, postAdressChosenExperiment)\n\n}\n\n// contains dummy\n\n/** gets a dictionary with two entrys\n * \"to_navigate\" all child experiments\n * \"cant_navigate\" all other files in directory\n * @param setDirectories \n */\nexport async function GetDirectories(setDirectories){\n    var [fetched, setfetched] = useState(false) \n   passDataAsMap(setDirectories, fetched, setfetched, fetchAdressGetDirectories)\n    \n\n    \n}\n\n\n\nconst markerNavUP = \"navigate_up\"\nexport async function NavigateUP(){\n    var message =  new Map()\n    message.set(\"marker\", markerNavUP)\n    post(message, postAdressNavigateUP)\n}\nconst markerNavDown = \"navigate_down\"\nexport async function NavigateDown(directory){\n    var message =  new Map()\n    message.set(\"marker\", markerNavDown)\n    message.set(\"dir\", directory)\n    post(message, postAdressNavigateDown)\n\n}\n\nconst markerCreate = \"crerate\"\nexport async function Create(name){\n    var message =  new Map()\n    message.set(\"marker\", markerCreate)\n    message.set(\"name\", name)\n    post(message, postAdressCreateDirectory)\n\n}\nconst markerDeleteDirectory = \"delete_directory\"\nexport async function DeleteDirectory(name){\n    var message =  new Map()\n    message.set(\"marker\", markerDeleteDirectory)\n    message.set(\"name\", name)\n    \n    post(message, postAdressDeleteDirectory)\n\n}\n\nexport async function passDataDirect(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            set(data)\n        }\n        )\n}\n\nexport async function passDataAsMap(set, fetched, setfetched, adress){\n\n    if(fetched) {\n        return\n        }\n        setfetched (true)\n        const data = await (\n            await fetch(\n            adress\n            )\n        ).json().then(data => {\n            var dir = new Map(Object.entries(data))\n            set(dir)\n        }\n        )\n}\n\n\nexport async function post (content, postAdress){\n    const response = await fetch(postAdress, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(content)\n    })\n    return (await response.text()).toString()\n\n}  \n\n","/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/PopUp.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/ChooseRobotButton.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseDirectoryPage/DirectoryButton.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryButton.tsx",[],[],"/Users/justushund/Documents/PSETest/irei/irei-frontend/src/NavigationButton.tsx",[],[],{"ruleId":"174","severity":1,"message":"175","line":14,"column":24,"nodeType":"176","messageId":"177","endLine":14,"endColumn":37},{"ruleId":"178","severity":1,"message":"179","line":63,"column":20,"nodeType":"180","messageId":"181","endLine":63,"endColumn":22},{"ruleId":"174","severity":1,"message":"182","line":21,"column":11,"nodeType":"176","messageId":"177","endLine":21,"endColumn":18},{"ruleId":"174","severity":1,"message":"183","line":50,"column":10,"nodeType":"176","messageId":"177","endLine":50,"endColumn":20},{"ruleId":"174","severity":1,"message":"184","line":39,"column":11,"nodeType":"176","messageId":"177","endLine":39,"endColumn":20},{"ruleId":"174","severity":1,"message":"185","line":51,"column":11,"nodeType":"176","messageId":"177","endLine":51,"endColumn":15},{"ruleId":"178","severity":1,"message":"179","line":19,"column":12,"nodeType":"180","messageId":"181","endLine":19,"endColumn":14},{"ruleId":"174","severity":1,"message":"186","line":57,"column":14,"nodeType":"176","messageId":"177","endLine":57,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":27,"column":12,"nodeType":"180","messageId":"181","endLine":27,"endColumn":14},{"ruleId":"174","severity":1,"message":"187","line":6,"column":7,"nodeType":"176","messageId":"177","endLine":6,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":14,"column":20,"nodeType":"180","messageId":"181","endLine":14,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":8,"column":16,"nodeType":"180","messageId":"181","endLine":8,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":12,"column":16,"nodeType":"180","messageId":"181","endLine":12,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":25,"column":28,"nodeType":"180","messageId":"181","endLine":25,"endColumn":30},{"ruleId":"174","severity":1,"message":"188","line":1,"column":17,"nodeType":"176","messageId":"177","endLine":1,"endColumn":25},{"ruleId":"174","severity":1,"message":"185","line":88,"column":15,"nodeType":"176","messageId":"177","endLine":88,"endColumn":19},{"ruleId":"174","severity":1,"message":"185","line":104,"column":15,"nodeType":"176","messageId":"177","endLine":104,"endColumn":19},"@typescript-eslint/no-unused-vars","'setActionlist' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'buttons' is assigned a value but never used.","'SaveChoice' is defined but never used.","'chooseAll' is assigned a value but never used.","'data' is assigned a value but never used.","'response' is assigned a value but never used.","'successMarker' is assigned a value but never used.","'useState' is defined but never used."]