{"ast":null,"code":"import { post } from \"./BasicOpperations\";\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\";\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**informs the backend which lab was chosen\n    * \n    * @param labName  name of the chosen lab\n    */\nexport async function informLabChoise(action, labName, setErrorMessage) {\n  var message = new Map();\n  message.set(\"marker\", \"setCurrentLab\");\n  message.set(\"name\", labName);\n  var reload = false;\n  const result = Object.fromEntries(message);\n  await post(result, postAdressLab).then(res => {\n    if (res !== \"Done\") {\n      setErrorMessage(res);\n      action();\n      console.log(1);\n      reload = false;\n    } else {\n      reload = true;\n    }\n  });\n  return reload;\n}\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched) {\n  if (fetched) {\n    return;\n  }\n  setfetched(true);\n  const data = await (await fetch(fetchAdress)).json().then(data => {\n    var labs = new Map();\n    for (let i = 0; i < data.length; i++) {\n      var robots = new Map();\n      for (let j = 0; j < data[i].robots.length; j++) {\n        robots.set(data[i].robots[j].ip, data[i].robots[j].name);\n      }\n      labs.set(data[i].name, robots);\n    }\n    setLabs(labs);\n  });\n\n  // set state when the data received\n}","map":{"version":3,"names":["post","postAdressLab","fetchAdress","informLabChoise","action","labName","setErrorMessage","message","Map","set","reload","result","Object","fromEntries","then","res","console","log","getLabs","setLabs","fetched","setfetched","data","fetch","json","labs","i","length","robots","j","ip","name"],"sources":["/home/sihi/irei-frontend/src/backendComunication/FetchAndSetLab.tsx"],"sourcesContent":["import { post } from \"./BasicOpperations\";\n\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n \n \n /**informs the backend which lab was chosen\n     * \n     * @param labName  name of the chosen lab\n     */\n export async function informLabChoise (action, labName, setErrorMessage){\n  var message =  new Map()\n  message.set(\"marker\", \"setCurrentLab\")\n  message.set(\"name\", labName)\n  var reload = false\n  const result = Object.fromEntries(message)\n  await post(result, postAdressLab).then(res => {\n      if(res !== \"Done\") {\n          setErrorMessage(res)\n          action()\n          console.log(1)\n         reload = false\n      }\n    else {\n     reload = true\n    }\n  })\n\n  return reload\n\n    \n  }\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched){\n  \n    if(fetched) {\n      return\n    }\n     setfetched (true)\n      const data = await (\n        await fetch(\n          fetchAdress\n        )\n      ).json().then(data => {\n        var labs = new Map()\n        for(let i = 0; i < data.length; i++) {\n            var robots = new Map()\n            for(let j = 0; j < data[i].robots.length; j++) {\n              robots.set(data[i].robots[j].ip, data[i].robots[j].name)\n            }\n          labs.set(data[i].name, robots)\n        }\n        setLabs(labs)\n      }\n      )\n     \n          // set state when the data received\n  }"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AAEzC,MAAMC,aAAa,GAAG,yCAAyC;AAC/D,MAAMC,WAAW,GAAG,kCAAkC;;AAGrD;AACD;AACA;AACA;AACC,OAAO,eAAeC,eAAe,CAAEC,MAAM,EAAEC,OAAO,EAAEC,eAAe,EAAC;EACvE,IAAIC,OAAO,GAAI,IAAIC,GAAG,EAAE;EACxBD,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC;EACtCF,OAAO,CAACE,GAAG,CAAC,MAAM,EAAEJ,OAAO,CAAC;EAC5B,IAAIK,MAAM,GAAG,KAAK;EAClB,MAAMC,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACN,OAAO,CAAC;EAC1C,MAAMP,IAAI,CAACW,MAAM,EAAEV,aAAa,CAAC,CAACa,IAAI,CAACC,GAAG,IAAI;IAC1C,IAAGA,GAAG,KAAK,MAAM,EAAE;MACfT,eAAe,CAACS,GAAG,CAAC;MACpBX,MAAM,EAAE;MACRY,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;MACfP,MAAM,GAAG,KAAK;IACjB,CAAC,MACE;MACJA,MAAM,GAAG,IAAI;IACd;EACF,CAAC,CAAC;EAEF,OAAOA,MAAM;AAGb;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,OAAO,CAACC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAC;EAEvD,IAAGD,OAAO,EAAE;IACV;EACF;EACCC,UAAU,CAAE,IAAI,CAAC;EAChB,MAAMC,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACTrB,WAAW,CACZ,EACDsB,IAAI,EAAE,CAACV,IAAI,CAACQ,IAAI,IAAI;IACpB,IAAIG,IAAI,GAAG,IAAIjB,GAAG,EAAE;IACpB,KAAI,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC,IAAIE,MAAM,GAAG,IAAIpB,GAAG,EAAE;MACtB,KAAI,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACI,CAAC,CAAC,CAACE,MAAM,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;QAC7CD,MAAM,CAACnB,GAAG,CAACa,IAAI,CAACI,CAAC,CAAC,CAACE,MAAM,CAACC,CAAC,CAAC,CAACC,EAAE,EAAER,IAAI,CAACI,CAAC,CAAC,CAACE,MAAM,CAACC,CAAC,CAAC,CAACE,IAAI,CAAC;MAC1D;MACFN,IAAI,CAAChB,GAAG,CAACa,IAAI,CAACI,CAAC,CAAC,CAACK,IAAI,EAAEH,MAAM,CAAC;IAChC;IACAT,OAAO,CAACM,IAAI,CAAC;EACf,CAAC,CACA;;EAEG;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}