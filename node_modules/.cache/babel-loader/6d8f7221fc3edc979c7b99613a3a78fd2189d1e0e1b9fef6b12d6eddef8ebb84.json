{"ast":null,"code":"var _jsxFileName = \"/Users/justushund/Documents/irei1/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { getLabs, informLabChoise } from '../../backendComunication/FetchAndSetLab';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport TopBar from '../../TopBar';\nimport ChooseLaboratoryButton from './ChooseLaboratoryButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport default function ChooseLaboratoryPage() {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\");\n  const [error, setError] = useState(false);\n  const [labs, setLabs] = useState(new Map()); // key = labname, value = robot list\n  var [fetched, setfetched] = useState(false);\n  getLabs(setLabs, fetched, setfetched);\n  const errorState = () => {\n    setError(current => !current);\n  };\n  const arrLabs = Array.from(labs, function (entry) {\n    return {\n      key: entry[0],\n      value: entry[1]\n    };\n  });\n  const action = name => {\n    informLabChoise(errorState, name, setErrorMessage);\n  };\n  const robots = key => {\n    return Array.from(labs.get(key), function (entry) {\n      return {\n        key: entry[0],\n        value: entry[1]\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      title: \"Choose Laboratory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), arrLabs.map(number => {\n      return /*#__PURE__*/_jsxDEV(ChooseLaboratoryButton, {\n        name: number.key,\n        action: action,\n        buttons: robots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(ErrorPopUp, {\n      active: error,\n      deactivate: errorState,\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n}\n\n/**\n * //shema für labornamen \n    for (let key of labs.keys()) {\n      console.log(key) //laborname\n    }\n\n    // shema um roboter namen zu kriegen\n    for (let key of labs.keys()) {\n      if(typeof labs.get(key) != \"undefined\") {\n        for (let koy of labs.get(key).keys()) { // is catched one line above\n          console.log(koy); // roboternamen\n      }          \n      }\n\n    }\n */\n_s(ChooseLaboratoryPage, \"Tm1/zhtn7dLuA9WguWtA0bZJNh4=\");\n_c = ChooseLaboratoryPage;\nvar _c;\n$RefreshReg$(_c, \"ChooseLaboratoryPage\");","map":{"version":3,"names":["React","useState","getLabs","informLabChoise","ErrorPopUp","TopBar","ChooseLaboratoryButton","fetchAdress","ChooseLaboratoryPage","errorMessage","setErrorMessage","error","setError","labs","setLabs","Map","fetched","setfetched","errorState","current","arrLabs","Array","from","entry","key","value","action","name","robots","get","map","number"],"sources":["/Users/justushund/Documents/irei1/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { getLabs, informLabChoise } from '../../backendComunication/FetchAndSetLab';\nimport { ErrorPopUp } from '../../PopUp/ErrorPopUP';\nimport TopBar from '../../TopBar';\nimport ChooseLaboratoryButton from './ChooseLaboratoryButton';\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport default function ChooseLaboratoryPage() {\n  const [errorMessage, setErrorMessage] = useState(\"sorry something went wrong\")\n  const [error, setError] = useState(false)\n    const [labs, setLabs] = useState(new Map<string, Map<string, string>>()); // key = labname, value = robot list\n    var [fetched, setfetched] = useState(false)\n    getLabs(setLabs, fetched, setfetched)\n\n    const errorState = () => {\n      setError(current => !current)\n     }\n\n\n    const arrLabs = Array.from(labs, function (entry) {\n      return { key: entry[0], value: entry[1]};\n    });\n\n\n    const action = (name) => {  informLabChoise(errorState,name, setErrorMessage)\n    }\n\n    const robots = (key) => {\n     return Array.from(labs.get(key), function (entry) {\n      return { key: entry[0], value: entry[1]}})\n    }\n\n\n       return ( \n      <div>\n        <TopBar title=\"Choose Laboratory\"></TopBar>\n        {\n          arrLabs.map((number) => {\n            return <ChooseLaboratoryButton name={number.key} action={action}\n            buttons = {robots} />\n          })\n        }\n         <ErrorPopUp active={error} deactivate={errorState} message={errorMessage}/>\n      </div>\n    );\n}\n\n/**\n * //shema für labornamen \n    for (let key of labs.keys()) {\n      console.log(key) //laborname\n    }\n\n    // shema um roboter namen zu kriegen\n    for (let key of labs.keys()) {\n      if(typeof labs.get(key) != \"undefined\") {\n        for (let koy of labs.get(key).keys()) { // is catched one line above\n          console.log(koy); // roboternamen\n      }          \n      }\n\n    }\n */\n\n\n   "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,EAAEC,eAAe,QAAQ,0CAA0C;AACnF,SAASC,UAAU,QAAQ,wBAAwB;AACnD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,sBAAsB,MAAM,0BAA0B;AAAC;AAC9D,MAAMC,WAAW,GAAG,kCAAkC;;AAEtD;AACA;AACA;AACA;AACA,eAAe,SAASC,oBAAoB,GAAG;EAAA;EAC7C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,4BAA4B,CAAC;EAC9E,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAIc,GAAG,EAA+B,CAAC,CAAC,CAAC;EAC1E,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC3CC,OAAO,CAACY,OAAO,EAAEE,OAAO,EAAEC,UAAU,CAAC;EAErC,MAAMC,UAAU,GAAG,MAAM;IACvBN,QAAQ,CAACO,OAAO,IAAI,CAACA,OAAO,CAAC;EAC9B,CAAC;EAGF,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACT,IAAI,EAAE,UAAUU,KAAK,EAAE;IAChD,OAAO;MAAEC,GAAG,EAAED,KAAK,CAAC,CAAC,CAAC;MAAEE,KAAK,EAAEF,KAAK,CAAC,CAAC;IAAC,CAAC;EAC1C,CAAC,CAAC;EAGF,MAAMG,MAAM,GAAIC,IAAI,IAAK;IAAGxB,eAAe,CAACe,UAAU,EAACS,IAAI,EAAEjB,eAAe,CAAC;EAC7E,CAAC;EAED,MAAMkB,MAAM,GAAIJ,GAAG,IAAK;IACvB,OAAOH,KAAK,CAACC,IAAI,CAACT,IAAI,CAACgB,GAAG,CAACL,GAAG,CAAC,EAAE,UAAUD,KAAK,EAAE;MACjD,OAAO;QAAEC,GAAG,EAAED,KAAK,CAAC,CAAC,CAAC;QAAEE,KAAK,EAAEF,KAAK,CAAC,CAAC;MAAC,CAAC;IAAA,CAAC,CAAC;EAC5C,CAAC;EAGE,oBACD;IAAA,wBACE,QAAC,MAAM;MAAC,KAAK,EAAC;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAU,EAEzCH,OAAO,CAACU,GAAG,CAAEC,MAAM,IAAK;MACtB,oBAAO,QAAC,sBAAsB;QAAC,IAAI,EAAEA,MAAM,CAACP,GAAI;QAAC,MAAM,EAAEE,MAAO;QAChE,OAAO,EAAIE;MAAO;QAAA;QAAA;QAAA;MAAA,QAAG;IACvB,CAAC,CAAC,eAEH,QAAC,UAAU;MAAC,MAAM,EAAEjB,KAAM;MAAC,UAAU,EAAEO,UAAW;MAAC,OAAO,EAAET;IAAa;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACxE;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,GAxCwBD,oBAAoB;AAAA,KAApBA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}