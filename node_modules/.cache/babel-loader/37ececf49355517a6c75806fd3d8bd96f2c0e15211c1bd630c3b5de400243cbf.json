{"ast":null,"code":"var _jsxFileName = \"/Users/justushund/Documents/PSE/neustes Frontend/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport TopBar from '../../TopBar';\nimport ChooseButton from '../ChooseRobotButton';\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChooseExperimentRobots() {\n  _s();\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  var chosen = new Map(); // the chosen robots \n\n  const clickedBot = (ip, name) => {\n    if (chosen.has(ip)) {\n      chosen.delete(ip);\n    } else {\n      chosen.set(ip, name);\n    }\n    console.log(chosen);\n  };\n  const confirm = () => {\n    // to do sent map chosen back to the backend\n  };\n  const buttons = from.map(number => {\n    return /*#__PURE__*/_jsxDEV(ChooseButton, {\n      name: number.value,\n      ip: number.key,\n      action: clickedBot,\n      state: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  });\n  const chooseAll = () => {\n    // toDo funktioniert noch nicht\n    for (var i = 0; i < from.length; i++) {\n      if (!chosen.has(from[i].key)) {\n        chosen.set(from[i].key, from[i].value);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      title: \"Choose Robots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), buttons, /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/ChooseExperimentRegister\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\",\n        onClick: confirm,\n        children: \"confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(ChooseExperimentRobots, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ChooseExperimentRobots;\nvar _c;\n$RefreshReg$(_c, \"ChooseExperimentRobots\");","map":{"version":3,"names":["React","TopBar","ChooseButton","useLocation","Link","ChooseExperimentRobots","location","from","state","chosen","Map","clickedBot","ip","name","has","delete","set","console","log","confirm","buttons","map","number","value","key","chooseAll","i","length"],"sources":["/Users/justushund/Documents/PSE/neustes Frontend/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseExperimentRobots.tsx"],"sourcesContent":["import React from 'react'\nimport TopBar from '../../TopBar';\nimport ChooseButton from '../ChooseRobotButton';\nimport { useLocation } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\n/**\n * The ChooserobotPage is used to choose the robots\n * the user wants to work with\n */\nexport default function ChooseExperimentRobots(){\n\n    const location = useLocation();\n    const { from } = location.state;\n\n    var chosen =  new Map<string, string>() // the chosen robots \n\n\n    const clickedBot = (ip, name) => {\n        if (chosen.has(ip))  {\n            chosen.delete(ip)\n        } else {\n            chosen.set(ip,name)\n        }\n        console.log(chosen)\n    }\n\n    const confirm = () => {\n        // to do sent map chosen back to the backend\n    }\n\n    const buttons = from.map((number) => { \n        return <ChooseButton name={number.value} \n        ip={number.key}\n        action = {clickedBot}\n        state = {false}/>\n    })\n\n\n    const chooseAll = () => { // toDo funktioniert noch nicht\n        for(var i = 0;i<from.length;i++) { \n           if (!chosen.has(from[i].key)) {\n            chosen.set(from[i].key,from[i].value)\n           }\n         }\n    }\n\n    return ( \n        <div>\n        <TopBar title=\"Choose Robots\"></TopBar>\n        {buttons}\n        <Link \n            to = {\"/ChooseExperimentRegister\"}\n        >\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n             onClick={confirm}>confirm</button>\n        </Link>\n        </div>\n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,QAAQ,kBAAkB;AACvC;AACA;AACA;AACA;AAHA;AAIA,eAAe,SAASC,sBAAsB,GAAE;EAAA;EAE5C,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAM;IAAEI;EAAK,CAAC,GAAGD,QAAQ,CAACE,KAAK;EAE/B,IAAIC,MAAM,GAAI,IAAIC,GAAG,EAAkB,EAAC;;EAGxC,MAAMC,UAAU,GAAG,CAACC,EAAE,EAAEC,IAAI,KAAK;IAC7B,IAAIJ,MAAM,CAACK,GAAG,CAACF,EAAE,CAAC,EAAG;MACjBH,MAAM,CAACM,MAAM,CAACH,EAAE,CAAC;IACrB,CAAC,MAAM;MACHH,MAAM,CAACO,GAAG,CAACJ,EAAE,EAACC,IAAI,CAAC;IACvB;IACAI,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;EACvB,CAAC;EAED,MAAMU,OAAO,GAAG,MAAM;IAClB;EAAA,CACH;EAED,MAAMC,OAAO,GAAGb,IAAI,CAACc,GAAG,CAAEC,MAAM,IAAK;IACjC,oBAAO,QAAC,YAAY;MAAC,IAAI,EAAEA,MAAM,CAACC,KAAM;MACxC,EAAE,EAAED,MAAM,CAACE,GAAI;MACf,MAAM,EAAIb,UAAW;MACrB,KAAK,EAAI;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EACrB,CAAC,CAAC;EAGF,MAAMc,SAAS,GAAG,MAAM;IAAE;IACtB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAACA,CAAC,GAACnB,IAAI,CAACoB,MAAM,EAACD,CAAC,EAAE,EAAE;MAC9B,IAAI,CAACjB,MAAM,CAACK,GAAG,CAACP,IAAI,CAACmB,CAAC,CAAC,CAACF,GAAG,CAAC,EAAE;QAC7Bf,MAAM,CAACO,GAAG,CAACT,IAAI,CAACmB,CAAC,CAAC,CAACF,GAAG,EAACjB,IAAI,CAACmB,CAAC,CAAC,CAACH,KAAK,CAAC;MACtC;IACF;EACL,CAAC;EAED,oBACI;IAAA,wBACA,QAAC,MAAM;MAAC,KAAK,EAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAU,EACtCH,OAAO,eACR,QAAC,IAAI;MACD,EAAE,EAAI,2BAA4B;MAAA,uBAElC;QAAQ,SAAS,EAAC,qFAAqF;QACtG,OAAO,EAAED,OAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAiB;MAAA;MAAA;MAAA;IAAA,QAChC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEd;AAAC,GAjDuBd,sBAAsB;EAAA,QAEzBF,WAAW;AAAA;AAAA,KAFRE,sBAAsB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}