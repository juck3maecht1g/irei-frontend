{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// this file contains multiple methods used to fetch robots from the backend\n\nimport { useState } from \"react\";\nconst fetchAdressGripperRobots = \"http://127.0.0.1:5000/api/getRobotsForGripper\";\nconst fetchAdressLabRobots = \"http://127.0.0.1:5000/api/getRobotsOfLab\";\nconst fetchAdressExpRobots = \"http://127.0.0.1:5000/api/getRobotsInExperiment\";\n\n//gets the robots chosen for gripper on controll page\n\nexport async function GetGripperRobots(setRobots) {\n  _s();\n  var [fetched, setfetched] = useState(false);\n  getRobots(setRobots, fetched, setfetched, fetchAdressGripperRobots);\n}\n\n//gets the robots chosen for experiment\n_s(GetGripperRobots, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c = GetGripperRobots;\nexport async function GetExpRobots(setRobots) {\n  _s2();\n  var [fetched, setfetched] = useState(false);\n  getRobots(setRobots, fetched, setfetched, fetchAdressExpRobots);\n}\n_s2(GetExpRobots, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c2 = GetExpRobots;\nexport async function GetLabRobots(setRobots, labName) {\n  _s3();\n  var [fetched, setfetched] = useState(false);\n  getRobots(setRobots, fetched, setfetched, fetchAdressLabRobots);\n}\n\n/** gets a list of robots from the specified adress and sublies them ad map to the specified usestate\n * \n * @param setRobots \n * @param fetched \n * @param setfetchedRobots \n * @param adress \n * @returns \n */\n_s3(GetLabRobots, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c3 = GetLabRobots;\nasync function getRobots(setRobots, fetched, setfetched, adress) {\n  if (fetched) {\n    return;\n  }\n  setfetched(true);\n  const data = await (await fetch(adress)).json().then(data => {\n    var robots = new Map();\n    for (let j = 0; j < data.length; j++) {\n      robots.set(data[j].ip, data[j].name);\n    }\n    setRobots(robots);\n  });\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GetGripperRobots\");\n$RefreshReg$(_c2, \"GetExpRobots\");\n$RefreshReg$(_c3, \"GetLabRobots\");","map":{"version":3,"names":["useState","fetchAdressGripperRobots","fetchAdressLabRobots","fetchAdressExpRobots","GetGripperRobots","setRobots","fetched","setfetched","getRobots","GetExpRobots","GetLabRobots","labName","adress","data","fetch","json","then","robots","Map","j","length","set","ip","name"],"sources":["/home/sihi/irei-frontend/src/backendComunication/FetchRobots.tsx"],"sourcesContent":["// this file contains multiple methods used to fetch robots from the backend\n\n\nimport { useState } from \"react\"\nimport { informLabChoise } from \"./FetchAndSetLab\"\n\n\n\nconst fetchAdressGripperRobots = \"http://127.0.0.1:5000/api/getRobotsForGripper\" \nconst fetchAdressLabRobots = \"http://127.0.0.1:5000/api/getRobotsOfLab\"\nconst fetchAdressExpRobots = \"http://127.0.0.1:5000/api/getRobotsInExperiment\"\n\n\n\n//gets the robots chosen for gripper on controll page\n\nexport async function GetGripperRobots(setRobots){\n    var [fetched, setfetched] = useState(false) \n    getRobots(setRobots, fetched, setfetched, fetchAdressGripperRobots)\n \n    \n  }\n  \n\n  //gets the robots chosen for experiment\n  export async function GetExpRobots(setRobots){\n      var [fetched, setfetched] = useState(false) \n      getRobots(setRobots, fetched, setfetched, fetchAdressExpRobots)\n    }\n\n\n\n    export async function GetLabRobots(setRobots, labName){\n        var [fetched, setfetched] = useState(false) \n        getRobots(setRobots, fetched, setfetched, fetchAdressLabRobots)\n      }\n\n  /** gets a list of robots from the specified adress and sublies them ad map to the specified usestate\n   * \n   * @param setRobots \n   * @param fetched \n   * @param setfetchedRobots \n   * @param adress \n   * @returns \n   */\n    async function getRobots(setRobots, fetched, setfetched, adress){\n      \n      if(fetched) {\n          return\n        }\n         setfetched (true)\n          const data = await (\n            await fetch(\n              adress\n            )\n          ).json().then(data => {\n                var robots = new Map()\n                for(let j = 0; j < data.length; j++) {\n                  robots.set(data[j].ip, data[j].name)\n                }\n            \n            setRobots(robots)\n          }\n          )\n      }"],"mappings":";;;AAAA;;AAGA,SAASA,QAAQ,QAAQ,OAAO;AAKhC,MAAMC,wBAAwB,GAAG,+CAA+C;AAChF,MAAMC,oBAAoB,GAAG,0CAA0C;AACvE,MAAMC,oBAAoB,GAAG,iDAAiD;;AAI9E;;AAEA,OAAO,eAAeC,gBAAgB,CAACC,SAAS,EAAC;EAAA;EAC7C,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3CQ,SAAS,CAACH,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEN,wBAAwB,CAAC;AAGrE;;AAGA;AAAA,GARoBG,gBAAgB;AAAA,KAAhBA,gBAAgB;AASpC,OAAO,eAAeK,YAAY,CAACJ,SAAS,EAAC;EAAA;EACzC,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3CQ,SAAS,CAACH,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEJ,oBAAoB,CAAC;AACjE;AAAC,IAHmBM,YAAY;AAAA,MAAZA,YAAY;AAOhC,OAAO,eAAeC,YAAY,CAACL,SAAS,EAAEM,OAAO,EAAC;EAAA;EAClD,IAAI,CAACL,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC3CQ,SAAS,CAACH,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEL,oBAAoB,CAAC;AACjE;;AAEJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAPE,IALwBQ,YAAY;AAAA,MAAZA,YAAY;AAalC,eAAeF,SAAS,CAACH,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEK,MAAM,EAAC;EAE9D,IAAGN,OAAO,EAAE;IACR;EACF;EACCC,UAAU,CAAE,IAAI,CAAC;EAChB,MAAMM,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACTF,MAAM,CACP,EACDG,IAAI,EAAE,CAACC,IAAI,CAACH,IAAI,IAAI;IAChB,IAAII,MAAM,GAAG,IAAIC,GAAG,EAAE;IACtB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCF,MAAM,CAACI,GAAG,CAACR,IAAI,CAACM,CAAC,CAAC,CAACG,EAAE,EAAET,IAAI,CAACM,CAAC,CAAC,CAACI,IAAI,CAAC;IACtC;IAEJlB,SAAS,CAACY,MAAM,CAAC;EACnB,CAAC,CACA;AACL;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}