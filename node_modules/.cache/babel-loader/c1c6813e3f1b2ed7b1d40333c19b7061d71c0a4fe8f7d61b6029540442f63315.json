{"ast":null,"code":"var _jsxFileName = \"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchAdress = \"http://127.0.0.1:5000/test\";\nconst Massage = \"\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport function ChooseLaboratoryPage() {\n  _s();\n  var [labs, setLabs] = useState(new Map()); // key = labname, value = robot list\n  var [fetched, setfetched] = useState(false);\n  getLabs(setLabs, fetched, setfetched);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n}\n_s(ChooseLaboratoryPage, \"zNLvJab/FOOjexZW1Q3xRvNBlY0=\");\n_c = ChooseLaboratoryPage;\nexport default ChooseLaboratoryPage;\nasync function getLabs(setLabs, fetched, setfetched) {\n  if (fetched) {\n    return;\n  }\n  setfetched(true);\n  const data = await (await fetch(fetchAdress)).json().then(data => {\n    var labs = new Map();\n    for (let i = 0; i < data.length; i++) {\n      labs.set(data[i].name, data[i].robots);\n    }\n    setLabs(labs);\n  });\n\n  // set state when the data received\n}\nvar _c;\n$RefreshReg$(_c, \"ChooseLaboratoryPage\");","map":{"version":3,"names":["React","useState","fetchAdress","Massage","ChooseLaboratoryPage","labs","setLabs","Map","fetched","setfetched","getLabs","data","fetch","json","then","i","length","set","name","robots"],"sources":["/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx"],"sourcesContent":["import { data } from 'browserslist'\nimport React, { useEffect, useState } from 'react'\nconst fetchAdress = \"http://127.0.0.1:5000/test\"\nconst Massage = \"\"\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport function ChooseLaboratoryPage() {\n    var [labs, setLabs] = useState(new Map()); // key = labname, value = robot list\n    var [fetched, setfetched] = useState(false)\n    getLabs(setLabs, fetched, setfetched)\n\n    return ( \n      \n      <div>\n        \n      </div>\n    );\n\n    \n    \n\n    \n}\nexport default ChooseLaboratoryPage;\n\n\n\n\nasync function getLabs(setLabs, fetched, setfetched){\n  if(fetched) {\n    return\n  }\n   setfetched (true)\n    const data = await (\n      await fetch(\n        fetchAdress\n      )\n    ).json().then(data => {\n      var labs = new Map()\n      for(let i = 0; i < data.length; i++) {\n        labs.set(data[i].name, data[i].robots)\n      }\n      setLabs(labs)\n    }\n    )\n   \n        // set state when the data received\n}"],"mappings":";;AACA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAAA;AAClD,MAAMC,WAAW,GAAG,4BAA4B;AAChD,MAAMC,OAAO,GAAG,EAAE;;AAElB;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,GAAG;EAAA;EACnC,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAIM,GAAG,EAAE,CAAC,CAAC,CAAC;EAC3C,IAAI,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3CS,OAAO,CAACJ,OAAO,EAAEE,OAAO,EAAEC,UAAU,CAAC;EAErC,oBAEE;IAAA;IAAA;IAAA;EAAA,QAEM;AAOZ;AAAC,GAhBeL,oBAAoB;AAAA,KAApBA,oBAAoB;AAiBpC,eAAeA,oBAAoB;AAKnC,eAAeM,OAAO,CAACJ,OAAO,EAAEE,OAAO,EAAEC,UAAU,EAAC;EAClD,IAAGD,OAAO,EAAE;IACV;EACF;EACCC,UAAU,CAAE,IAAI,CAAC;EAChB,MAAME,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACTV,WAAW,CACZ,EACDW,IAAI,EAAE,CAACC,IAAI,CAACH,IAAI,IAAI;IACpB,IAAIN,IAAI,GAAG,IAAIE,GAAG,EAAE;IACpB,KAAI,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCV,IAAI,CAACY,GAAG,CAACN,IAAI,CAACI,CAAC,CAAC,CAACG,IAAI,EAAEP,IAAI,CAACI,CAAC,CAAC,CAACI,MAAM,CAAC;IACxC;IACAb,OAAO,CAACD,IAAI,CAAC;EACf,CAAC,CACA;;EAEG;AACR;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}