{"ast":null,"code":"var _jsxFileName = \"/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from \"react-router-dom\";\nimport TopBar from '../../../TopBar';\nimport { SetCoordinateType, GetPositions, appendAction, GetCoordinates } from '../ActionFetch';\n\n/**\n * The ChooseVariablePage is used to choose \n * a variable for a robot to approach\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChooseVariablePage(props) {\n  _s();\n  const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\");\n  const [error, setError] = useState(false);\n  const errorState = () => {\n    setError(current => !current);\n  };\n  const location = useLocation();\n  const {\n    kind\n  } = location.state;\n  const {\n    ip\n  } = location.state;\n  const [arrayPosition, setPositions] = useState([new Map()]);\n  GetCoordinates(setPositions).then(res => {\n    const buttons = arrayPosition.map(number => {\n      console.log(number);\n      return /*#__PURE__*/_jsxDEV(PositionButton, {\n        name: number.get(\"name\"),\n        position: number.get(\"coordinate\"),\n        errorState: errorState,\n        setErrorMessage: setErrorMessage,\n        kind: kind,\n        ip: ip,\n        state: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 16\n      }, this);\n    });\n  });\n  console.log(\"pos\", arrayPosition);\n  var state = \"joint\";\n  const changeType = () => {\n    if (state === \"kartesisch\") {\n      state = \"kartesisch\";\n    } else {\n      state = \"joint\";\n    }\n    SetCoordinateType(state, errorState, setErrorMessage);\n    GetPositions(setPositions);\n  };\n\n  //const arrayPosition = Array.from( positions, function (entry) {\n  //return { key: entry[0], value: entry[1]}})\n\n  const buttons = arrayPosition.map(number => {\n    console.log(number);\n    return /*#__PURE__*/_jsxDEV(PositionButton, {\n      name: number.get(\"name\"),\n      position: number.get(\"coordinate\"),\n      errorState: errorState,\n      setErrorMessage: setErrorMessage,\n      kind: kind,\n      ip: ip,\n      state: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      title: \"Choose Position\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeType,\n      children: state ? \"joint\" : \"kartesisch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), buttons]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(ChooseVariablePage, \"d+gvIGh6/5dEfdzJvdCXtJjKGH4=\", false, function () {\n  return [useLocation];\n});\n_c = ChooseVariablePage;\nfunction PositionButton(props) {\n  const sent = () => {\n    var help = new Map();\n    help.set(\"key\", props.kind);\n    help.set(\"robot\", props.ip);\n    help.set(\"position\", props.position);\n    appendAction(props.errorState, help, props.setErrorMessage);\n  };\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: \"/ActionListPage\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\",\n      onClick: sent,\n      children: [props.name, \"\\n\", props.position.get(\"values\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_c2 = PositionButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChooseVariablePage\");\n$RefreshReg$(_c2, \"PositionButton\");","map":{"version":3,"names":["React","useState","Link","useLocation","TopBar","SetCoordinateType","GetPositions","appendAction","GetCoordinates","ChooseVariablePage","props","errorMessage","setErrorMessage","error","setError","errorState","current","location","kind","state","ip","arrayPosition","setPositions","Map","then","res","buttons","map","number","console","log","get","changeType","PositionButton","sent","help","set","position","name"],"sources":["/home/sihi/irei-frontend/src/controlPages/ActionPage/actionkind/ChooseVariablePage.tsx"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from \"react-router-dom\";\nimport TopBar from '../../../TopBar';\nimport { SetCoordinateType, GetPositions, appendAction, GetCoordinates } from '../ActionFetch';\n\n\n/**\n * The ChooseVariablePage is used to choose \n * a variable for a robot to approach\n */\nexport default function ChooseVariablePage (props) {\n    const [errorMessage, setErrorMessage] = useState(\"sorry robots couldnt be changed\")\n    const [error, setError] = useState(false)\n    const errorState = () => {\n        setError(current => !current)\n    }\n    const location = useLocation();\n    const { kind } = location.state;\n    const { ip } = location.state;\n\n    const [arrayPosition, setPositions] = useState([new Map])\n\n    GetCoordinates(setPositions).then(res => {\n         const buttons = arrayPosition.map((number) => {\n        console.log(number)\n        return <PositionButton name= {number.get(\"name\")} \n        position={number.get(\"coordinate\")} errorState={errorState} setErrorMessage={setErrorMessage}\n        kind={kind} ip={ip} state={state}/>\n    })\n    })\n    console.log(\"pos\",arrayPosition)\n    var state = \"joint\";\n    \n    const changeType = () => {\n        if (state === \"kartesisch\") {\n            state = \"kartesisch\";\n        } else {\n            state = \"joint\";\n        }\n        SetCoordinateType(state, errorState, setErrorMessage);\n        GetPositions(setPositions)\n    }\n    \n\n    \n    //const arrayPosition = Array.from( positions, function (entry) {\n        //return { key: entry[0], value: entry[1]}})\n\n\n    const buttons = arrayPosition.map((number) => {\n        console.log(number)\n        return <PositionButton name= {number.get(\"name\")} \n        position={number.get(\"coordinate\")} errorState={errorState} setErrorMessage={setErrorMessage}\n        kind={kind} ip={ip} state={state}/>\n    })\n\n    return (\n        <div>\n            <TopBar title=\"Choose Position\" />\n            <button onClick = {changeType}>\n                {state? \"joint\" : \"kartesisch\"}\n            </button>\n            { buttons}\n        </div>\n    );\n}\n\nfunction PositionButton (props) {\n\n    const sent = () => {\n        var help = new Map();\n        help.set(\"key\", props.kind);\n        help.set(\"robot\", props.ip);\n        help.set(\"position\", props.position)\n        appendAction(props.errorState, help, props.setErrorMessage);\n    } \n\n    return ( \n    <Link to = {\"/ActionListPage\"}>\n      <button className=\"irei-button mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\"\n      onClick = {sent}>\n        {props.name}\n        {\"\\n\"}\n        {props.position.get(\"values\")}\n      </button>\n    </Link>\n     );\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}