{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState } from \"react\";\nimport { passDataDirect, post } from \"../../backendComunication/BasicOpperations\";\nconst fetchAdressAllActionLists = \"/api/get-action_lists\";\nconst postAdressActionList = \"/api/set_action_list\";\nconst fetchAdressContentActiveList = \"/api/get_action_list_content\";\nconst postAdressAppendAction = \"/api/append_action\";\nconst postAdressDeleteAction = \"/api/delete_action\";\nconst postAdressSwapActions = \"/api/swap_action\";\nconst postAdressCreateActionList = \"/api/create_action_list\";\nconst postAdressExecuteList = \"/api/executeList\";\nconst postAdressCoordinateType = \"/api/set_coordinate_type\";\nconst fetchAdressPositionList = \"/api/get_coordinates\";\n\n/**gets a list of dictionarrys containing a \"name\" of the action list and a \"key\"\n * specifieing if sequential or parallel\n * \n * @param setLists \n */\nexport async function GetActionListNames(setLists) {\n  _s();\n  // returns string list\n  var [fetched, setfetched] = useState(false);\n  passDataDirect(setLists, fetched, setfetched, fetchAdressAllActionLists);\n}\n/**\n *  fetches an array of dictionarrys each containing all data nessesary if key != action_list\n *  otherwise containig just the name of the underling actionList and information if it is a paralell od sequential list\n * @param setContent the method to set with the fetched data\n */\n_s(GetActionListNames, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c = GetActionListNames;\nexport async function GetActionListContent(setContent) {\n  _s2();\n  // returns string list\n  var [fetched, setfetched] = useState(false);\n  passDataDirect(setContent, fetched, setfetched, fetchAdressContentActiveList);\n}\n\n/** action is a dictionarry containing the key which action to append, and all nessesary arguments for that action\n */\n_s2(GetActionListContent, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c2 = GetActionListContent;\nexport async function appendAction(action) {\n  var toPost = action;\n  toPost.set(\"marker\", \"append_action\");\n  post(toPost, postAdressAppendAction);\n}\n\n/** informs the backend that the actionlist with the given name was chosen\n * and gets its content\n * \n * @param setContent \n * @param name \n */\nexport async function SetActionList(name) {\n  var toPost = new Map();\n  toPost.set(\"marker\", \"set_action_list\");\n  toPost.set(\"name\", name);\n  post(toPost, postAdressActionList);\n}\n\n/** delets the action in the currently changed list at the given position\n * and gets the changed list\n * \n * @param setContent \n * @param position \n */\n_c3 = SetActionList;\nexport async function DeleteAction(position) {\n  var toPost = new Map();\n  toPost.set(\"marker\", \"delete_action\");\n  toPost.set(\"position\", position);\n  post(toPost, postAdressDeleteAction);\n}\n\n/** swaps the actions at the two specified positions and gets the modified list\n * \n * @param setContent \n * @param first position as int\n * @param second \n */\n_c4 = DeleteAction;\nexport async function SwapActions(first, second) {\n  var toPost = new Map();\n  toPost.set(\"marker\", \"swap\");\n  toPost.set(\"first\", first);\n  toPost.set(\"second\", second);\n  post(toPost, postAdressSwapActions);\n}\n/** creates a new action listwith given name and given type(\"sequential_list\" or\"parallel_list\")\n *  and gets the content of the new list\n * @param setContent \n * @param name \n * @param type \n */\n_c5 = SwapActions;\nexport async function CreatetActionList(name, type) {\n  var message = new Map();\n  message.set(\"marker\", \"create_action_list\");\n  message.set(\"name\", name);\n  message.set(\"key\", type);\n  post(message, postAdressCreateActionList);\n}\n/** executes the action list with the given name\n * \n * @param name \n */\n_c6 = CreatetActionList;\nexport async function ExecuteActionList(name) {\n  var message = new Map();\n  message.set(\"marker\", \"execute_action_list\");\n  message.set(\"name\", name);\n  post(message, postAdressExecuteList);\n}\n\n/** sets the type the coordinates are handeled ans displaied in ton the specified type(\"cartesian\",\"joint\")\n * \n * @param type \n */\n_c7 = ExecuteActionList;\nexport async function SetCoordinateType(type) {\n  var message = new Map();\n  message.set(\"marker\", \"set_coordinate_type\");\n  message.set(\"type\", type);\n  post(message, postAdressCoordinateType);\n}\n\n/** gets all available positions as dict with (\"name\", and the coordinate \"coordinate\")\n * \n * @param setPositions \n */\n_c8 = SetCoordinateType;\nexport async function GetPositions(setPositions) {\n  _s3();\n  // returns Map list\n  var [fetched, setfetched] = useState(false);\n  passDataDirect(setPositions, fetched, setfetched, fetchAdressPositionList);\n}\n_s3(GetPositions, \"oYvWj/HcRx72yjWu3UMoZWDRi1E=\");\n_c9 = GetPositions;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"GetActionListNames\");\n$RefreshReg$(_c2, \"GetActionListContent\");\n$RefreshReg$(_c3, \"SetActionList\");\n$RefreshReg$(_c4, \"DeleteAction\");\n$RefreshReg$(_c5, \"SwapActions\");\n$RefreshReg$(_c6, \"CreatetActionList\");\n$RefreshReg$(_c7, \"ExecuteActionList\");\n$RefreshReg$(_c8, \"SetCoordinateType\");\n$RefreshReg$(_c9, \"GetPositions\");","map":{"version":3,"names":["useState","passDataDirect","post","fetchAdressAllActionLists","postAdressActionList","fetchAdressContentActiveList","postAdressAppendAction","postAdressDeleteAction","postAdressSwapActions","postAdressCreateActionList","postAdressExecuteList","postAdressCoordinateType","fetchAdressPositionList","GetActionListNames","setLists","fetched","setfetched","GetActionListContent","setContent","appendAction","action","toPost","set","SetActionList","name","Map","DeleteAction","position","SwapActions","first","second","CreatetActionList","type","message","ExecuteActionList","SetCoordinateType","GetPositions","setPositions"],"sources":["/Users/justushund/Documents/irei1/irei-frontend/src/controlPages/ActionPage/ActionFetch.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { passDataDirect, post, passDataAsMap } from \"../../backendComunication/BasicOpperations\"\n\nconst fetchAdressAllActionLists = \"/api/get-action_lists\"\nconst postAdressActionList = \"/api/set_action_list\"\nconst fetchAdressContentActiveList = \"/api/get_action_list_content\"\nconst postAdressAppendAction = \"/api/append_action\"\nconst postAdressDeleteAction = \"/api/delete_action\"\nconst postAdressSwapActions = \"/api/swap_action\"\nconst postAdressCreateActionList = \"/api/create_action_list\"\nconst postAdressExecuteList = \"/api/executeList\"\nconst postAdressCoordinateType = \"/api/set_coordinate_type\"\nconst fetchAdressPositionList = \"/api/get_coordinates\"\n\n/**gets a list of dictionarrys containing a \"name\" of the action list and a \"key\"\n * specifieing if sequential or parallel\n * \n * @param setLists \n */\nexport async function GetActionListNames(setLists){ // returns string list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setLists, fetched, setfetched, fetchAdressAllActionLists)\n\n\n}\n/**\n *  fetches an array of dictionarrys each containing all data nessesary if key != action_list\n *  otherwise containig just the name of the underling actionList and information if it is a paralell od sequential list\n * @param setContent the method to set with the fetched data\n */\n\nexport async function GetActionListContent(setContent){ // returns string list\n    var [fetched, setfetched] = useState(false)                                     \n    passDataDirect(setContent, fetched, setfetched, fetchAdressContentActiveList)\n\n\n}\n\n/** action is a dictionarry containing the key which action to append, and all nessesary arguments for that action\n */\nexport async function appendAction(action){\n    var toPost =  action\n    toPost.set(\"marker\", \"append_action\")\n    post(toPost, postAdressAppendAction)\n}\n\n\n/** informs the backend that the actionlist with the given name was chosen\n * and gets its content\n * \n * @param setContent \n * @param name \n */\nexport async function SetActionList(name:String){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"set_action_list\")\n    toPost.set(\"name\", name)\n    post(toPost, postAdressActionList)\n}\n\n/** delets the action in the currently changed list at the given position\n * and gets the changed list\n * \n * @param setContent \n * @param position \n */\nexport async function DeleteAction(position){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"delete_action\")\n    toPost.set(\"position\", position)\n    post(toPost, postAdressDeleteAction)\n\n}\n\n/** swaps the actions at the two specified positions and gets the modified list\n * \n * @param setContent \n * @param first position as int\n * @param second \n */\nexport async function SwapActions(first, second){\n    var toPost =  new Map()\n    toPost.set(\"marker\", \"swap\")\n    toPost.set(\"first\", first)\n    toPost.set(\"second\", second)\n    post(toPost, postAdressSwapActions)\n\n}\n/** creates a new action listwith given name and given type(\"sequential_list\" or\"parallel_list\")\n *  and gets the content of the new list\n * @param setContent \n * @param name \n * @param type \n */\nexport async function CreatetActionList(name:String, type:String){\n    var message =  new Map()\n    message.set(\"marker\", \"create_action_list\")\n    message.set(\"name\", name)\n    message.set(\"key\", type)\n    post(message, postAdressCreateActionList)\n}\n/** executes the action list with the given name\n * \n * @param name \n */\nexport async function ExecuteActionList(name:String){\n    var message =  new Map()\n    message.set(\"marker\", \"execute_action_list\")\n    message.set(\"name\", name)\n    post(message, postAdressExecuteList)\n\n}\n\n/** sets the type the coordinates are handeled ans displaied in ton the specified type(\"cartesian\",\"joint\")\n * \n * @param type \n */\nexport async function SetCoordinateType(type:String){\n    var message =  new Map()\n    message.set(\"marker\", \"set_coordinate_type\")\n    message.set(\"type\", type)\n    post(message, postAdressCoordinateType)\n\n}\n\n/** gets all available positions as dict with (\"name\", and the coordinate \"coordinate\")\n * \n * @param setPositions \n */\nexport async function GetPositions(setPositions){ // returns Map list\n    var [fetched, setfetched] = useState(false) \n    passDataDirect(setPositions, fetched, setfetched, fetchAdressPositionList)\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}