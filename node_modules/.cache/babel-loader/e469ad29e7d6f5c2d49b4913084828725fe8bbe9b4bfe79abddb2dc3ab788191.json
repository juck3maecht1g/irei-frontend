{"ast":null,"code":"import { post } from \"./BasicOpperations\";\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\";\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n\n/**informs the backend which lab was chosen\n    * \n    * @param labName  name of the chosen lab\n    */\nexport async function informLabChoise(labName) {\n  post(labName, postAdressLab);\n  /*const response = await fetch(postAdressLab, {\n      'method': 'POST',\n      headers : {\n      'Content-Type': 'application/json'\n      },\n      body : JSON.stringify(labName)\n  })*/\n}\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched) {\n  if (fetched) {\n    return;\n  }\n  setfetched(true);\n  const data = await (await fetch(fetchAdress)).json().then(data => {\n    var labs = new Map();\n    for (let i = 0; i < data.length; i++) {\n      var robots = new Map();\n      for (let j = 0; j < data[i].robots.length; j++) {\n        robots.set(data[i].robots[j].name, data[i].robots[j].ip);\n      }\n      labs.set(data[i].name, robots);\n    }\n    setLabs(labs);\n  });\n\n  // set state when the data received\n}","map":{"version":3,"names":["post","postAdressLab","fetchAdress","informLabChoise","labName","getLabs","setLabs","fetched","setfetched","data","fetch","json","then","labs","Map","i","length","robots","j","set","name","ip"],"sources":["/Users/justushund/Documents/PSE/neustes Frontend/irei-frontend/src/backendComunication/FetchAndSetLab.tsx"],"sourcesContent":["import { post } from \"./BasicOpperations\";\n\nconst postAdressLab = \"http://127.0.0.1:5000/api/setCurrentLab\"\nconst fetchAdress = \"http://127.0.0.1:5000/api/getLab\";\n \n \n /**informs the backend which lab was chosen\n     * \n     * @param labName  name of the chosen lab\n     */\n export async function informLabChoise (labName){\n    post(labName, postAdressLab)\n    /*const response = await fetch(postAdressLab, {\n        'method': 'POST',\n        headers : {\n        'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(labName)\n    })*/\n\n    \n  }\n\n/** gets all labs as dict also containing all robots\n * \n * \n * replace testdik with data\n * \n */\nexport async function getLabs(setLabs, fetched, setfetched){\n  \n    if(fetched) {\n      return\n    }\n     setfetched (true)\n      const data = await (\n        await fetch(\n          fetchAdress\n        )\n      ).json().then(data => {\n        var labs = new Map()\n        for(let i = 0; i < data.length; i++) {\n            var robots = new Map()\n            for(let j = 0; j < data[i].robots.length; j++) {\n              robots.set(data[i].robots[j].name, data[i].robots[j].ip)\n            }\n          labs.set(data[i].name, robots)\n        }\n        setLabs(labs)\n      }\n      )\n     \n          // set state when the data received\n  }"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AAEzC,MAAMC,aAAa,GAAG,yCAAyC;AAC/D,MAAMC,WAAW,GAAG,kCAAkC;;AAGrD;AACD;AACA;AACA;AACC,OAAO,eAAeC,eAAe,CAAEC,OAAO,EAAC;EAC5CJ,IAAI,CAACI,OAAO,EAAEH,aAAa,CAAC;EAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AAGE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeI,OAAO,CAACC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAC;EAEvD,IAAGD,OAAO,EAAE;IACV;EACF;EACCC,UAAU,CAAE,IAAI,CAAC;EAChB,MAAMC,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACTR,WAAW,CACZ,EACDS,IAAI,EAAE,CAACC,IAAI,CAACH,IAAI,IAAI;IACpB,IAAII,IAAI,GAAG,IAAIC,GAAG,EAAE;IACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC,IAAIE,MAAM,GAAG,IAAIH,GAAG,EAAE;MACtB,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACM,CAAC,CAAC,CAACE,MAAM,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;QAC7CD,MAAM,CAACE,GAAG,CAACV,IAAI,CAACM,CAAC,CAAC,CAACE,MAAM,CAACC,CAAC,CAAC,CAACE,IAAI,EAAEX,IAAI,CAACM,CAAC,CAAC,CAACE,MAAM,CAACC,CAAC,CAAC,CAACG,EAAE,CAAC;MAC1D;MACFR,IAAI,CAACM,GAAG,CAACV,IAAI,CAACM,CAAC,CAAC,CAACK,IAAI,EAAEH,MAAM,CAAC;IAChC;IACAX,OAAO,CAACO,IAAI,CAAC;EACf,CAAC,CACA;;EAEG;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}