{"ast":null,"code":"var _jsxFileName = \"/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchAdress = \"http://127.0.0.1:5000/test\";\nconst Massage = \"\";\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport function ChooseLaboratoryPage() {\n  _s();\n  var [labNames, setLabs] = useState([]);\n  var [fetched, setfetched] = useState(false);\n  getLabNames(setLabs, fetched, setfetched);\n  console.log(labNames.length);\n  console.log(labNames[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n}\n_s(ChooseLaboratoryPage, \"HVad50rizDSG0yDY+w6AH4JNQXQ=\");\n_c = ChooseLaboratoryPage;\nexport default ChooseLaboratoryPage;\nasync function getLabNames(setLabs, fetched, setfetched) {\n  if (fetched) {\n    return;\n  }\n  setfetched(true);\n  const data = await (await fetch(fetchAdress)).json().then(data => {\n    var labNames = new Map();\n    for (let i = 0; i < data.length; i++) {\n      labNames.set(data[i].name, data[i].robots);\n    }\n    setLabs(labNames);\n  });\n\n  // set state when the data received\n}\nvar _c;\n$RefreshReg$(_c, \"ChooseLaboratoryPage\");","map":{"version":3,"names":["React","useState","fetchAdress","Massage","ChooseLaboratoryPage","labNames","setLabs","fetched","setfetched","getLabNames","console","log","length","data","fetch","json","then","Map","i","set","name","robots"],"sources":["/home/sihi/irei-frontend/src/choosePages/chooseLaboratoryPage/ChooseLaboratoryPage.tsx"],"sourcesContent":["import { data } from 'browserslist'\nimport React, { useEffect, useState } from 'react'\nconst fetchAdress = \"http://127.0.0.1:5000/test\"\nconst Massage = \"\"\n\n/**\n * The ChooseLaboratoryPage is used to choose \n * the Laboratory the user wants to work in\n */\nexport function ChooseLaboratoryPage() {\n    var [labNames, setLabs] = useState([]);\n    var [fetched, setfetched] = useState(false)\n    \n    getLabNames(setLabs, fetched, setfetched)\n    console.log(labNames.length)\n    console.log(labNames[0])\n    return ( \n      \n      <div>\n        \n      </div>\n    );\n\n    \n    \n\n    \n}\nexport default ChooseLaboratoryPage;\n\n\n\n\nasync function getLabNames(setLabs, fetched, setfetched){\n  if(fetched) {\n    return\n  }\n    setfetched (true)\n    const data = await (\n      await fetch(\n        fetchAdress\n      )\n    ).json().then(data => {\n      var labNames = new Map()\n      for(let i = 0; i < data.length; i++) {\n        labNames.set(data[i].name, data[i].robots)\n      }\n      setLabs(labNames)\n    }\n    )\n  \n        // set state when the data received\n}"],"mappings":";;AACA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAAA;AAClD,MAAMC,WAAW,GAAG,4BAA4B;AAChD,MAAMC,OAAO,GAAG,EAAE;;AAElB;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,GAAG;EAAA;EACnC,IAAI,CAACC,QAAQ,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,IAAI,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE3CQ,WAAW,CAACH,OAAO,EAAEC,OAAO,EAAEC,UAAU,CAAC;EACzCE,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACO,MAAM,CAAC;EAC5BF,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxB,oBAEE;IAAA;IAAA;IAAA;EAAA,QAEM;AAOZ;AAAC,GAlBeD,oBAAoB;AAAA,KAApBA,oBAAoB;AAmBpC,eAAeA,oBAAoB;AAKnC,eAAeK,WAAW,CAACH,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAC;EACtD,IAAGD,OAAO,EAAE;IACV;EACF;EACEC,UAAU,CAAE,IAAI,CAAC;EACjB,MAAMK,IAAI,GAAG,MAAM,CACjB,MAAMC,KAAK,CACTZ,WAAW,CACZ,EACDa,IAAI,EAAE,CAACC,IAAI,CAACH,IAAI,IAAI;IACpB,IAAIR,QAAQ,GAAG,IAAIY,GAAG,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAE;MACnCb,QAAQ,CAACc,GAAG,CAACN,IAAI,CAACK,CAAC,CAAC,CAACE,IAAI,EAAEP,IAAI,CAACK,CAAC,CAAC,CAACG,MAAM,CAAC;IAC5C;IACAf,OAAO,CAACD,QAAQ,CAAC;EACnB,CAAC,CACA;;EAEG;AACR;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}